import { Directive, Input, ElementRef, Renderer2 } from '@angular/core';
import { DEFAULTS, EVENTS } from './statics/scroll-to-helpers';
import { ScrollToService } from './scroll-to.service';
var ScrollToDirective = (function () {
    function ScrollToDirective(_elementRef, _scrollToService, _renderer2) {
        this._elementRef = _elementRef;
        this._scrollToService = _scrollToService;
        this._renderer2 = _renderer2;
        this.ngxScrollTo = DEFAULTS.target;
        this.ngxScrollToEvent = DEFAULTS.event;
        this.ngxScrollToDuration = DEFAULTS.duration;
        this.ngxScrollToEasing = DEFAULTS.easing;
        this.ngxScrollToOffset = DEFAULTS.offset;
        this.ngxScrollToOffsetMap = DEFAULTS.offsetMap;
    }
    /**
     * Angular Lifecycle Hook - After View Init
     *
     * @todo Implement Subscription for Events
     *
     * @returns void
     */
    ScrollToDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        // Test Event Support
        if (!EVENTS.includes(this.ngxScrollToEvent))
            throw new Error("Unsupported Event '" + this.ngxScrollToEvent + "'");
        // Listen for the trigger...
        this._renderer2.listen(this._elementRef.nativeElement, this.ngxScrollToEvent, function (event) {
            _this._config = {
                target: _this.ngxScrollTo,
                duration: _this.ngxScrollToDuration,
                easing: _this.ngxScrollToEasing,
                offset: _this.ngxScrollToOffset,
                offsetMap: _this.ngxScrollToOffsetMap
            };
            _this._scrollToService.scrollTo(event, _this._config);
        });
    };
    ScrollToDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[ngx-scroll-to]'
                },] },
    ];
    /** @nocollapse */
    ScrollToDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: ScrollToService, },
        { type: Renderer2, },
    ]; };
    ScrollToDirective.propDecorators = {
        'ngxScrollTo': [{ type: Input, args: ['ngx-scroll-to',] },],
        'ngxScrollToEvent': [{ type: Input, args: ['ngx-scroll-to-event',] },],
        'ngxScrollToDuration': [{ type: Input, args: ['ngx-scroll-to-duration',] },],
        'ngxScrollToEasing': [{ type: Input, args: ['ngx-scroll-to-easing',] },],
        'ngxScrollToOffset': [{ type: Input, args: ['ngx-scroll-to-offset',] },],
        'ngxScrollToOffsetMap': [{ type: Input, args: ['ngx-scroll-to-offset-map',] },],
    };
    return ScrollToDirective;
}());
export { ScrollToDirective };
//# sourceMappingURL=scroll-to.directive.js.map