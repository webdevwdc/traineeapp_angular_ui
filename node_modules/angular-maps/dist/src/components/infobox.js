"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var infobox_service_1 = require("../services/infobox.service");
var infobox_action_1 = require("./infobox-action");
/**
 * internal counter to use as ids for multiple infoboxes.
 */
var infoBoxId = 0;
/**
 * InfoBox renders a info window inside a {@link MapMarkerDirective} or standalone.
 *
 * ### Example
 * ```typescript
 * import {Component} from '@angular/core';
 * import {MapComponent, MapMarkerDirective, InfoBoxComponent, InfoBoxActionDirective} from '...';
 *
 * @Component({
 *  selector: 'my-map-cmp',
 *  styles: [`
 *    .map-container { height: 300px; }
 * `],
 *  template: `
 *    <x-map [Latitude]="lat" [Longitude]="lng" [Zoom]="zoom">
 *      <x-map-marker [Latitude]="lat" [Longitude]="lng" [Label]="'M'">
 *        <x-info-box [DisableAutoPan]="true">
 *          Hi, this is the content of the <strong>info window</strong>
 *         </x-info-box>
 *       </x-map-marker>
 *     </x-map>
 *  `
 * })
 * ```
 *
 * @export
 * @class InfoBoxComponent
 * @implements {OnDestroy}
 * @implements {OnChanges}
 */
var InfoBoxComponent = (function () {
    ///
    /// Constructor
    ///
    /**
     * Creates an instance of InfoBoxComponent.
     * @param {InfoBoxService} _infoBoxService - Concrete {@link InfoBoxService} implementation for underlying Map architecture.
     *
     * @memberof InfoBoxComponent
     */
    function InfoBoxComponent(_infoBoxService) {
        this._infoBoxService = _infoBoxService;
        ///
        /// Field declarations
        ///
        this._infoBoxAddedToManager = false;
        this._id = (infoBoxId++).toString();
        /**
         * Determine whether only one infobox can be open at a time. Note that ANY info box settings.
         *
         * @type {boolean}
         * @memberof InfoBoxComponent
         */
        this.Modal = true;
        /**
         * Determines visibility of infobox
         *
         * @type {boolean}
         * @memberof InfoBoxComponent
         */
        this.Visible = false;
        /**
         * Determines if other info boxes should be closed before opening this one
         *
         * @type {boolean}
         * @memberof InfoBoxComponent
         */
        this.CloseInfoBoxesOnOpen = true;
        ///
        /// Delegate defintions
        ///
        /**
         * Emits an event when the info window is closed.
         *
         * @type {EventEmitter<void>}
         * @memberof InfoBoxComponent
         */
        this.InfoBoxClose = new core_1.EventEmitter();
    }
    Object.defineProperty(InfoBoxComponent.prototype, "HtmlContent", {
        ///
        /// Property declarations.
        ///
        /**
         * Gets the HTML content of the info box.
         *
         * @readonly
         * @type {string}
         * @memberof InfoBoxComponent
         */
        get: function () {
            if (this._content.nativeElement && this._content.nativeElement.innerText && this._content.nativeElement.innerText.trim() !== '') {
                return this._content.nativeElement.outerHTML;
            }
            return '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InfoBoxComponent.prototype, "Id", {
        /**
         * Gets the Id of the info box as a string.
         *
         * @readonly
         * @type {string}
         * @memberof InfoBoxComponent
         */
        get: function () { return this._id; },
        enumerable: true,
        configurable: true
    });
    ///
    /// Public methods
    ///
    /**
     * Closes the Infobox.
     *
     * @returns {Promise<void>} -
     *
     * @memberof InfoBoxComponent
     */
    InfoBoxComponent.prototype.Close = function () {
        var _this = this;
        return this._infoBoxService.Close(this).then(function () {
            _this.InfoBoxClose.emit(_this._id);
        });
    };
    /**
     * Called on after component view as been initialized. Part of the ng Component life cycle.
     *
     * @returns {void}
     *
     * @memberof Map
     */
    InfoBoxComponent.prototype.ngAfterViewInit = function () {
        this._infoBoxService.AddInfoWindow(this);
        this._infoBoxAddedToManager = true;
        this.HandleEvents();
    };
    /**
     * Called when changes to the databoud properties occur. Part of the ng Component life cycle.
     *
     * @param {{ [propName: string]: SimpleChange }} changes - Changes that have occured.
     * @return {void}
     *
     * @memberof Map
     */
    InfoBoxComponent.prototype.ngOnChanges = function (changes) {
        if (!this._infoBoxAddedToManager) {
            return;
        }
        if ((changes['latitude'] || changes['longitude']) && typeof this.Latitude === 'number' &&
            typeof this.Longitude === 'number') {
            this._infoBoxService.SetPosition(this, {
                latitude: changes['latitude'].currentValue,
                longitude: changes['longitude'].currentValue
            });
        }
        this.SetInfoWindowOptions(changes);
    };
    /**
     * Called on component destruction. Frees the resources used by the component. Part of the ng Component life cycle.
     *
     * @returns {void}
     *
     * @memberof Map
     */
    InfoBoxComponent.prototype.ngOnDestroy = function () { this._infoBoxService.DeleteInfoWindow(this); };
    /**
     * Opens a closed info window.
     *
     * @param {ILatLong} [loc]  - {@link ILatLong } representing position on which to open the window.
     * @returns {Promise<void>} - Promise that is fullfilled when the infobox has been opened.
     *
     * @memberof InfoBoxComponent
     */
    InfoBoxComponent.prototype.Open = function (loc) {
        return this._infoBoxService.Open(this, loc);
    };
    /**
     * Returns a string representation of the info box.
     *
     * @returns {string} - string representation of the info box.
     *
     * @memberof InfoBoxComponent
     */
    InfoBoxComponent.prototype.ToString = function () { return 'InfoBoxComponent-' + this._id; };
    ///
    /// Private methods
    ///
    /**
     * Delegate handling the map click events.
     *
     * @private
     *
     * @memberof MapComponent
     */
    InfoBoxComponent.prototype.HandleEvents = function () {
        var _this = this;
        this._infoBoxService.CreateEventObservable('infowindowclose', this).subscribe(function (e) {
            _this.InfoBoxClose.emit(_this._id);
        });
    };
    /**
     * Sets the info window options
     *
     * @private
     * @param {{ [key: string]: SimpleChange }} changes
     *
     * @memberof InfoBoxComponent
     */
    InfoBoxComponent.prototype.SetInfoWindowOptions = function (changes) {
        var options = {};
        if (changes['title']) {
            options.title = this.Title;
        }
        if (changes['description']) {
            options.description = this.Description;
        }
        if (changes['disableAutoPan']) {
            options.disableAutoPan = this.DisableAutoPan;
        }
        if (changes['visible']) {
            options.visible = this.Visible;
        }
        if (changes['xOffset'] || changes['yOffset']) {
            if (options.pixelOffset == null) {
                options.pixelOffset = { x: 0, y: 0 };
            }
            options.pixelOffset.x = this.xOffset;
            options.pixelOffset.y = this.yOffset;
        }
        this._infoBoxService.SetOptions(this, options);
    };
    return InfoBoxComponent;
}());
InfoBoxComponent.decorators = [
    { type: core_1.Component, args: [{
                selector: 'x-info-box',
                template: "\n        <div #infoBoxContent class='info-box-content'>\n            <ng-content></ng-content>\n        </div>",
                styles: ["\n        x-map .MicrosoftMap .Infobox .infobox-title { padding: 10px 10px 5px 10px }\n        x-map .MicrosoftMap .Infobox .infobox-info { padding: 3px 10px 10px 10px }\n        x-map .MicrosoftMap .Infobox .infobox-actions { height: auto }\n    "],
                encapsulation: core_1.ViewEncapsulation.None
            },] },
];
/** @nocollapse */
InfoBoxComponent.ctorParameters = function () { return [
    { type: infobox_service_1.InfoBoxService, },
]; };
InfoBoxComponent.propDecorators = {
    '_content': [{ type: core_1.ViewChild, args: ['infoBoxContent',] },],
    'InfoWindowActions': [{ type: core_1.ContentChildren, args: [infobox_action_1.InfoBoxActionDirective,] },],
    'Latitude': [{ type: core_1.Input },],
    'Longitude': [{ type: core_1.Input },],
    'Title': [{ type: core_1.Input },],
    'Description': [{ type: core_1.Input },],
    'DisableAutoPan': [{ type: core_1.Input },],
    'MaxWidth': [{ type: core_1.Input },],
    'Modal': [{ type: core_1.Input },],
    'HostMarker': [{ type: core_1.Input },],
    'Visible': [{ type: core_1.Input },],
    'xOffset': [{ type: core_1.Input },],
    'yOffset': [{ type: core_1.Input },],
    'CloseInfoBoxesOnOpen': [{ type: core_1.Input },],
    'InfoBoxClose': [{ type: core_1.Output },],
};
exports.InfoBoxComponent = InfoBoxComponent;
//# sourceMappingURL=infobox.js.map