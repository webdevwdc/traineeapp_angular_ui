"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var layer_service_1 = require("../services/layer.service");
var map_marker_1 = require("./map-marker");
/**
 * internal counter to use as ids for multiple layers.
 */
var layerId = 0;
/**
 * MapLayerDirective creates a layer on a {@link MapComponent}.
 *
 * ### Example
 * ```typescript
 * import {Component} from '@angular/core';
 * import {MapComponent, MapMarkerDirective} from '...';
 *
 * @Component({
 *  selector: 'my-map-cmp',
 *  styles: [`
 *   .map-container {
 *     height: 300px;
 *   }
 * `],
 * template: `
 *   <x-map [Latitude]='lat' [Longitude]='lng' [Zoom]='zoom'>
 *     <x-map-layer [Visible]='visible'>
 *         <x-map-marker [Latitude]='lat' [Longitude]='lng' [Label]=''M''></x-map-marker>
 *     </x-map-layer>
 *   </x-map>
 * `
 * })
 * ```
 *
 * @export
 * @class MapLayerDirective
 * @implements {OnInit}
 * @implements {OnDestroy}
 * @implements {OnChanges}
 */
var MapLayerDirective = (function () {
    ///
    /// Constructor
    ///
    /**
     * Creates an instance of MapLayerDirective.
     * @param {LayerService} _layerService - Concreted implementation of a layer service for the underlying maps implementations.
     * Generally provided via injections.
     * @param {ViewContainerRef} _containerRef - Reference to the container hosting the map canvas. Generally provided via injection.
     *
     * @memberof MapLayerDirective
     */
    function MapLayerDirective(_layerService, _containerRef) {
        this._layerService = _layerService;
        this._containerRef = _containerRef;
        ///
        /// Field declarations
        ///
        this._visible = true;
        this._addedToManager = false;
        this._id = layerId++;
        this._id = layerId++;
    }
    Object.defineProperty(MapLayerDirective.prototype, "Visible", {
        ///
        /// Property declarations
        ///
        /**
         * Gets or sets the layer visibility.
         *
         * @type {boolean}
         * @memberof MapLayerDirective
         */
        get: function () { return this._visible; },
        set: function (val) { this._visible = val; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapLayerDirective.prototype, "Id", {
        /**
         * Gets the layer id.
         *
         * @readonly
         * @type {number}
         * @memberof MapLayerDirective
         */
        get: function () { return this._id; },
        enumerable: true,
        configurable: true
    });
    ///
    /// Public methods
    ///
    /**
     * Called on Component initialization. Part of ng Component life cycle.
     * @returns {void}
     *
     * @memberof MapLayerDirective
     */
    MapLayerDirective.prototype.ngOnInit = function () {
        this._containerRef.element.nativeElement.attributes['layerId'] = this._id.toString();
        this._layerService.AddLayer(this);
        this._addedToManager = true;
    };
    /**
     * Called when changes to the databoud properties occur. Part of the ng Component life cycle.
     *
     * @param {{ [propName: string]: SimpleChange }} changes - Changes that have occured.
     * @returns {void}
     *
     * @memberof MapLayerDirective
     */
    MapLayerDirective.prototype.ngOnChanges = function (changes) {
        if (!this._addedToManager) {
            return;
        }
        if (changes['Visible']) {
            this._layerService.GetNativeLayer(this).then(function (l) {
                l.SetVisible(!l.GetVisible());
            });
        }
    };
    /**
     * Called on component destruction. Frees the resources used by the component. Part of the ng Component life cycle.
     *
     *
     * @memberof MapLayerDirective
     */
    MapLayerDirective.prototype.ngOnDestroy = function () {
        this._layerService.DeleteLayer(this);
    };
    return MapLayerDirective;
}());
MapLayerDirective.decorators = [
    { type: core_1.Directive, args: [{
                selector: 'x-map-layer'
            },] },
];
/** @nocollapse */
MapLayerDirective.ctorParameters = function () { return [
    { type: layer_service_1.LayerService, },
    { type: core_1.ViewContainerRef, },
]; };
MapLayerDirective.propDecorators = {
    '_markers': [{ type: core_1.ContentChildren, args: [map_marker_1.MapMarkerDirective,] },],
    'Visible': [{ type: core_1.Input },],
};
exports.MapLayerDirective = MapLayerDirective;
//# sourceMappingURL=map-layer.js.map