"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var marker_service_1 = require("../services/marker.service");
var infobox_1 = require("./infobox");
/**
 * internal counter to use as ids for marker.
 */
var markerId = 0;
/**
 * MapMarkerDirective renders a map marker inside a {@link MapComponent}.
 *
 * ### Example
 * ```typescript
 * import {Component} from '@angular/core';
 * import {MapComponent, MapMarkerDirective} from '...';
 *
 * @Component({
 *  selector: 'my-map-cmp',
 *  styles: [`
 *   .map-container {
 *     height: 300px;
 *   }
 * `],
 * template: `
 *   <x-map [Latitude]="lat" [Longitude]="lng" [Zoom]="zoom">
 *      <x-map-marker [Latitude]="lat" [Longitude]="lng" [Label]="'M'"></x-map-marker>
 *   </x-map>
 * `
 * })
 * ```
 *
 * @export
 * @class MapMarkerDirective
 * @implements {OnDestroy}
 * @implements {OnChanges}
 * @implements {AfterContentInit}
 */
var MapMarkerDirective = (function () {
    ///
    /// Constructor
    ///
    /**
     * Creates an instance of MapMarkerDirective.
     * @param {MarkerService} _markerService - Concreate implementation of a {@link MarkerService}.
     * Expects a {@link BingMarkerService} instance.
     * @param {ViewContainerRef} _containerRef - View container hosting the marker.
     * Used to determine parent layer through markup.
     *
     * @memberof MapMarkerDirective
     */
    function MapMarkerDirective(_markerService, _containerRef) {
        this._markerService = _markerService;
        this._containerRef = _containerRef;
        ///
        /// Field declarations
        ///
        this._inCustomLayer = false;
        this._inClusterLayer = false;
        this._markerAddedToManger = false;
        this._events = [];
        /**
         * If true, the marker can be dragged. Default value is false.
         *
         * @type {boolean}
         * @memberof MapMarkerDirective
         */
        this.Draggable = false;
        /**
         * True to indiciate whether this is the first marker in a set.
         * Use this for bulk operations (particularily clustering) to ensure performance.
         *
         * @type {boolean}
         * @memberof MapMarkerDirective
         */
        this.IsFirstInSet = false;
        /**
         * True to indiciate whether this is the last marker in a set.
         * Use this for bulk operations (particularily clustering) to ensure performance.
         *
         * @type {boolean}
         * @memberof MapMarkerDirective
         */
        this.IsLastInSet = true;
        /**
         * Arbitary metadata to assign to the Marker. This is useful for events
         *
         * @type {Map<string, any>}
         * @memberof MapMarkerDirective
         */
        this.Metadata = new Map();
        ///
        /// Delegates
        ///
        /**
         * This event emitter gets emitted when the user clicks on the marker.
         *
         * @type {EventEmitter<IMarkerIconInfo>}
         * @memberof MapMarkerDirective
         */
        this.DynamicMarkerCreated = new core_1.EventEmitter();
        /**
         * This event emitter gets emitted when the user clicks on the marker.
         *
         * @type {EventEmitter<IMarkerEvent>}
         * @memberof MapMarkerDirective
         */
        this.MarkerClick = new core_1.EventEmitter();
        /**
         * This event is fired when the user stops dragging the marker.
         *
         * @type {EventEmitter<MouseEvent>}
         * @memberof MapMarkerDirective
         */
        this.DragEnd = new core_1.EventEmitter();
        this._id = (markerId++).toString();
    }
    Object.defineProperty(MapMarkerDirective.prototype, "AddedToManager", {
        ///
        /// Property declarations
        ///
        /**
         * Getswhether the marker has already been added to the marker service and is ready for use.
         *
         * @readonly
         * @type {boolean}
         * @memberof MapMarkerDirective
         */
        get: function () { return this._markerAddedToManger; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapMarkerDirective.prototype, "Id", {
        /**
         * Gets the id of the marker as a string.
         *
         * @readonly
         * @type {string}
         * @memberof MapMarkerDirective
         */
        get: function () { return this._id; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapMarkerDirective.prototype, "InClusterLayer", {
        /**
         * Gets whether the marker is in a cluster layer. See {@link ClusterLayer}.
         *
         * @readonly
         * @type {boolean}
         * @memberof MapMarkerDirective
         */
        get: function () { return this._inClusterLayer; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapMarkerDirective.prototype, "InCustomLayer", {
        /**
         * Gets whether the marker is in a custom layer. See {@link MapLayer}.
         *
         * @readonly
         * @type {boolean}
         * @memberof MapMarkerDirective
         */
        get: function () { return this._inCustomLayer; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapMarkerDirective.prototype, "LayerId", {
        /**
         * gets the id of the Layer the marker belongs to.
         *
         * @readonly
         * @type {number}
         * @memberof MapMarkerDirective
         */
        get: function () { return this._layerId; },
        enumerable: true,
        configurable: true
    });
    ///
    /// Public methods
    ///
    /**
     * Translates a marker geo location to a pixel location relative to the map viewport.
     *
     * @param {ILatLong} [loc] - {@link ILatLong} containing the geo coordinates. If null, the marker's coordinates are used.
     * @returns {Promise<IPoint>} - A promise that when fullfilled contains an {@link IPoint} representing the pixel coordinates.
     *
     * @memberof MapMarkerDirective
     */
    MapMarkerDirective.prototype.LocationToPixel = function (loc) {
        return this._markerService.LocationToPoint(loc ? loc : this);
    };
    /**
     * Called after Component content initialization. Part of ng Component life cycle.
     * @returns {void}
     *
     * @memberof MapLayer
     */
    MapMarkerDirective.prototype.ngAfterContentInit = function () {
        if (this._infoBox != null) {
            this._infoBox.HostMarker = this;
        }
        if (this._containerRef.element.nativeElement.parentElement) {
            var parentName = this._containerRef.element.nativeElement.parentElement.tagName;
            if (parentName.toLowerCase() === 'x-cluster-layer') {
                this._inClusterLayer = true;
            }
            else if (parentName.toLowerCase() === 'x-map-layer') {
                this._inCustomLayer = true;
            }
            this._layerId = Number(this._containerRef.element.nativeElement.parentElement.attributes['layerId']);
        }
        if (!this._markerAddedToManger) {
            this._markerService.AddMarker(this);
            this._markerAddedToManger = true;
            this.AddEventListeners();
        }
    };
    /**
     * Called on component destruction. Frees the resources used by the component. Part of the ng Component life cycle.
     *
     *
     * @memberof MapLayer
     */
    MapMarkerDirective.prototype.ngOnDestroy = function () {
        this._markerService.DeleteMarker(this);
        this._events.forEach(function (s) { return s.unsubscribe(); });
    };
    /**
     * Reacts to changes in data-bound properties of the component and actuates property changes in the underling layer model.
     *
     * @param {{ [propName: string]: SimpleChange }} changes - collection of changes.
     *
     * @memberof MapMarkerDirective
     */
    MapMarkerDirective.prototype.ngOnChanges = function (changes) {
        if (typeof this.Latitude !== 'number' || typeof this.Longitude !== 'number') {
            return;
        }
        if (!this._markerAddedToManger) {
            return;
        }
        if (changes['Latitude'] || changes['Longitude']) {
            this._markerService.UpdateMarkerPosition(this);
        }
        if (changes['Title']) {
            this._markerService.UpdateTitle(this);
        }
        if (changes['Label']) {
            this._markerService.UpdateLabel(this);
        }
        if (changes['Draggable']) {
            this._markerService.UpdateDraggable(this);
        }
        if (changes['IconUrl'] || changes['IconInfo']) {
            this._markerService.UpdateIcon(this);
        }
        if (changes['Anchor']) {
            this._markerService.UpdateAnchor(this);
        }
        if (changes['Visible']) {
            this._markerService.UpdateVisible(this);
        }
    };
    /**
     * Obtains a string representation of the Marker Id.
     * @return {string} - string representation of the marker id.
     */
    MapMarkerDirective.prototype.toString = function () { return 'MapMarker-' + this._id.toString(); };
    ///
    /// Private methods
    ///
    /**
     * Adds various event listeners for the marker.
     *
     * @private
     *
     * @memberof MapMarkerDirective
     */
    MapMarkerDirective.prototype.AddEventListeners = function () {
        var _this = this;
        this._events.push(this._markerService.CreateEventObservable('click', this).subscribe(function (e) {
            var t = _this;
            if (_this._infoBox != null) {
                _this._infoBox.Open(_this._markerService.GetCoordinatesFromClick(e));
            }
            _this.MarkerClick.emit({
                Marker: _this,
                Click: e,
                Location: _this._markerService.GetCoordinatesFromClick(e),
                Pixels: _this._markerService.GetPixelsFromClick(e),
            });
        }));
        this._events.push(this._markerService.CreateEventObservable('dragend', this)
            .subscribe(function (e) {
            _this.DragEnd.emit(e);
        }));
    };
    return MapMarkerDirective;
}());
MapMarkerDirective.decorators = [
    { type: core_1.Directive, args: [{
                selector: 'x-map-marker'
            },] },
];
/** @nocollapse */
MapMarkerDirective.ctorParameters = function () { return [
    { type: marker_service_1.MarkerService, },
    { type: core_1.ViewContainerRef, },
]; };
MapMarkerDirective.propDecorators = {
    '_infoBox': [{ type: core_1.ContentChild, args: [infobox_1.InfoBoxComponent,] },],
    'Anchor': [{ type: core_1.Input },],
    'Draggable': [{ type: core_1.Input },],
    'Height': [{ type: core_1.Input },],
    'IconInfo': [{ type: core_1.Input },],
    'IconUrl': [{ type: core_1.Input },],
    'IsFirstInSet': [{ type: core_1.Input },],
    'IsLastInSet': [{ type: core_1.Input },],
    'Label': [{ type: core_1.Input },],
    'Latitude': [{ type: core_1.Input },],
    'Longitude': [{ type: core_1.Input },],
    'Metadata': [{ type: core_1.Input },],
    'Title': [{ type: core_1.Input },],
    'Visible': [{ type: core_1.Input },],
    'Width': [{ type: core_1.Input },],
    'DynamicMarkerCreated': [{ type: core_1.Output },],
    'MarkerClick': [{ type: core_1.Output },],
    'DragEnd': [{ type: core_1.Output },],
};
exports.MapMarkerDirective = MapMarkerDirective;
//# sourceMappingURL=map-marker.js.map