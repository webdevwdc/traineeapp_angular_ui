import { OnDestroy, OnChanges, ViewContainerRef, EventEmitter, AfterContentInit, SimpleChanges } from '@angular/core';
import { ILatLong } from '../interfaces/ilatlong';
import { PolygonService } from '../services/polygon.service';
import { InfoBoxComponent } from './infobox';
/**
 *
 * MapPolygonDirective renders a polygon inside a {@link MapComponent}.
 *
 * ### Example
 * ```typescript
 * import {Component} from '@angular/core';
 * import {MapComponent, MapPolygonDirective} from '...';
 *
 * @Component({
 *  selector: 'my-map,
 *  styles: [`
 *   .map-container { height: 300px; }
 * `],
 * template: `
 *   <x-map [Latitude]="lat" [Longitude]="lng" [Zoom]="zoom">
 *      <x-map-polygon [Paths]="path"></x-map-polygon>
 *   </x-map>
 * `
 * })
 * ```
 *
 *
 * @export
 * @class MapPolygonDirective
 * @implements {OnDestroy}
 * @implements {OnChanges}
 * @implements {AfterContentInit}
 */
export declare class MapPolygonDirective implements OnDestroy, OnChanges, AfterContentInit {
    private _polygonService;
    private _containerRef;
    private _inCustomLayer;
    private _id;
    private _layerId;
    private _addedToService;
    private _events;
    protected _infoBox: InfoBoxComponent;
    /**
     * Gets or sets whether this Polygon handles mouse events.
     *
     * @type {boolean}
     * @memberof MapPolygonDirective
     */
    Clickable: boolean;
    /**
     * If set to true, the user can drag this shape over the map.
     *
     * @type {boolean}
     * @memberof MapPolygonDirective
     */
    Draggable: boolean;
    /**
     * If set to true, the user can edit this shape by dragging the control
     * points shown at the vertices and on each segment.
     *
     * @type {boolean}
     * @memberof MapPolygonDirective
     */
    Editable: boolean;
    /**
     * The fill color of the polygon.
     *
     * @type {string}
     * @memberof MapPolygonDirective
     */
    FillColor: string;
    /**
     * The fill opacity between 0.0 and 1.0
     *
     * @type {number}
     * @memberof MapPolygonDirective
     */
    FillOpacity: number;
    /**
     * When true, edges of the polygon are interpreted as geodesic and will
     * follow the curvature of the Earth. When false, edges of the polygon are
     * rendered as straight lines in screen space. Note that the shape of a
     * geodesic polygon may appear to change when dragged, as the dimensions
     * are maintained relative to the surface of the earth. Defaults to false.
     *
     * @type {boolean}
     * @memberof MapPolygonDirective
     */
    Geodesic: boolean;
    /**
     * Set the maximum zoom at which the polygon lable is visible. Ignored if ShowLabel is false.
     * @type {number}
     * @memberof MapPolygonDirective
     */
    LabelMaxZoom: number;
    /**
     * Set the minimum zoom at which the polygon lable is visible. Ignored if ShowLabel is false.
     * @type {number}
     * @memberof MapPolygonDirective
     */
    LabelMinZoom: number;
    /**
     * The ordered sequence of coordinates that designates a closed loop.
     * Unlike polylines, a polygon may consist of one or more paths.
     *  As a result, the paths property may specify one or more arrays of
     * LatLng coordinates. Paths are closed automatically; do not repeat the
     * first vertex of the path as the last vertex. Simple polygons may be
     * defined using a single array of LatLngs. More complex polygons may
     * specify an array of arrays. Any simple arrays are converted into Arrays.
     * Inserting or removing LatLngs from the Array will automatically update
     * the polygon on the map.
     *
     * @type {(Array<ILatLong> | Array<Array<ILatLong>>)}
     * @memberof MapPolygonDirective
     */
    Paths: Array<ILatLong> | Array<Array<ILatLong>>;
    /**
     * Whether to show the title as the label on the polygon.
     *
     * @type {boolean}
     * @memberof MapPolygonDirective
     */
    ShowLabel: boolean;
    /**
     * Whether to show the title of the polygon as the tooltip on the polygon.
     *
     * @type {boolean}
     * @memberof MapPolygonDirective
     */
    ShowTooltip: boolean;
    /**
     * The stroke color.
     *
     * @type {string}
     * @memberof MapPolygonDirective
     */
    StrokeColor: string;
    /**
     * The stroke opacity between 0.0 and 1.0
     *
     * @type {number}
     * @memberof MapPolygonDirective
     */
    StrokeOpacity: number;
    /**
     * The stroke width in pixels.
     *
     * @type {number}
     * @memberof MapPolygonDirective
     */
    StrokeWeight: number;
    /**
     * The title of the polygon.
     *
     * @type {string}
     * @memberof MapPolygonDirective
     */
    Title: string;
    /**
     * Whether this polygon is visible on the map. Defaults to true.
     *
     * @type {boolean}
     * @memberof MapPolygonDirective
     */
    Visible: boolean;
    /**
     * The zIndex compared to other polys.
     *
     * @type {number}
     * @memberof MapPolygonDirective
     */
    zIndex: number;
    /**
     * This event is fired when the DOM click event is fired on the Polygon.
     *
     *   @type {EventEmitter<MouseEvent>}
     * @memberof MapPolygonDirective
     */
    Click: EventEmitter<MouseEvent>;
    /**
     * This event is fired when the DOM dblclick event is fired on the Polygon.
     *
     * @type {EventEmitter<MouseEvent>}
     * @memberof MapPolygonDirective
     */
    DblClick: EventEmitter<MouseEvent>;
    /**
     * This event is repeatedly fired while the user drags the polygon.
     *
     * @type {EventEmitter<MouseEvent>}
     * @memberof MapPolygonDirective
     */
    Drag: EventEmitter<MouseEvent>;
    /**
     * This event is fired when the user stops dragging the polygon.
     *
     * @type {EventEmitter<MouseEvent>}
     * @memberof MapPolygonDirective
     */
    DragEnd: EventEmitter<MouseEvent>;
    /**
     * This event is fired when the user starts dragging the polygon.
     *
     * @type {EventEmitter<MouseEvent>}
     * @memberof MapPolygonDirective
     */
    DragStart: EventEmitter<MouseEvent>;
    /**
     * This event is fired when the DOM mousedown event is fired on the Polygon.
     *
     * @type {EventEmitter<MouseEvent>}
     * @memberof MapPolygonDirective
     */
    MouseDown: EventEmitter<MouseEvent>;
    /**
     * This event is fired when the DOM mousemove event is fired on the Polygon.
     *
     * @type {EventEmitter<MouseEvent>}
     * @memberof MapPolygonDirective
     */
    MouseMove: EventEmitter<MouseEvent>;
    /**
     * This event is fired on Polygon mouseout.
     *
     * @type {EventEmitter<MouseEvent>}
     * @memberof MapPolygonDirective
     */
    MouseOut: EventEmitter<MouseEvent>;
    /**
     * This event is fired on Polygon mouseover.
     *
     * @type {EventEmitter<MouseEvent>}
     * @memberof MapPolygonDirective
     */
    MouseOver: EventEmitter<MouseEvent>;
    /**
     * This event is fired whe the DOM mouseup event is fired on the Polygon
     *
     * @type {EventEmitter<MouseEvent>}
     * @memberof MapPolygonDirective
     */
    MouseUp: EventEmitter<MouseEvent>;
    /**
     * This even is fired when the Polygon is right-clicked on.
     *
     * @type {EventEmitter<MouseEvent>}
     * @memberof MapPolygonDirective
     */
    RightClick: EventEmitter<MouseEvent>;
    /**
     * Gets whether the polygon has been registered with the service.
     * @readonly
     * @type {boolean}
     * @memberof MapPolygonDirective
     */
    readonly AddedToService: boolean;
    /**
     * Get the id of the polygon.
     *
     * @readonly
     * @type {number}
     * @memberof MapPolygonDirective
     */
    readonly Id: number;
    /**
     * Gets the id of the polygon as a string.
     *
     * @readonly
     * @type {string}
     * @memberof MapPolygonDirective
     */
    readonly IdAsString: string;
    /**
     * Gets whether the polygon is in a custom layer. See {@link MapLayer}.
     *
     * @readonly
     * @type {boolean}
     * @memberof MapPolygonDirective
     */
    readonly InCustomLayer: boolean;
    /**
     * gets the id of the Layer the polygon belongs to.
     *
     * @readonly
     * @type {number}
     * @memberof MapPolygonDirective
     */
    readonly LayerId: number;
    /**
     * Creates an instance of MapPolygonDirective.
     * @param {PolygonManager} _polygonManager
     *
     * @memberof MapPolygonDirective
     */
    constructor(_polygonService: PolygonService, _containerRef: ViewContainerRef);
    /**
     * Called after the content intialization of the directive is complete. Part of the ng Component life cycle.
     *
     * @return {void}
     *
     * @memberof MapPolygonDirective
     */
    ngAfterContentInit(): void;
    /**
     * Called when changes to the databoud properties occur. Part of the ng Component life cycle.
     *
     * @param {{ [propName: string]: SimpleChange }} changes - Changes that have occured.
     * @return {void}
     *
     * @memberof MapPolygonDirective
     */
    ngOnChanges(changes: SimpleChanges): any;
    /**
     * Called when the poygon is being destroyed. Part of the ng Component life cycle. Release resources.
     *
     *
     * @memberof MapPolygonDirective
     */
    ngOnDestroy(): void;
    /**
     * Wires up the event receivers.
     *
     * @private
     *
     * @memberof MapPolygonDirective
     */
    private AddEventListeners();
    /**
     * Generates IPolygon option changeset from directive settings.
     *
     * @private
     * @param {SimpleChanges} changes - {@link SimpleChanges} identifying the changes that occured.
     * @returns {IPolygonOptions} - {@link IPolygonOptions} containing the polygon options.
     *
     * @memberof MapPolygonDirective
     */
    private GeneratePolygonChangeSet(changes);
}
