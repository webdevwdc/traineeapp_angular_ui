import { OnDestroy, OnChanges, ViewContainerRef, EventEmitter, AfterContentInit, SimpleChanges } from '@angular/core';
import { ILatLong } from '../interfaces/ilatlong';
import { PolylineService } from './../services/polyline.service';
import { InfoBoxComponent } from './infobox';
/**
 *
 * MapPolylineDirective renders a polyline inside a {@link MapComponent}.
 *
 * ### Example
 * ```typescript
 * import {Component} from '@angular/core';
 * import {MapComponent, MapPolylineDirective} from '...';
 *
 * @Component({
 *  selector: 'my-map,
 *  styles: [`
 *   .map-container { height: 300px; }
 * `],
 * template: `
 *   <x-map [Latitude]="lat" [Longitude]="lng" [Zoom]="zoom">
 *      <x-map-polyline [Paths]="path"></x-map-polyline>
 *   </x-map>
 * `
 * })
 * ```
 *
 *
 * @export
 * @class MapPolylineDirective
 * @implements {OnDestroy}
 * @implements {OnChanges}
 * @implements {AfterContentInit}
 */
export declare class MapPolylineDirective implements OnDestroy, OnChanges, AfterContentInit {
    private _polylineService;
    private _containerRef;
    private _inCustomLayer;
    private _id;
    private _layerId;
    private _addedToService;
    private _events;
    protected _infoBox: InfoBoxComponent;
    /**
     * Gets or sets whether this Polyline handles mouse events.
     *
     * @type {boolean}
     * @memberof MapPolylineDirective
     */
    Clickable: boolean;
    /**
     * If set to true, the user can drag this shape over the map.
     *
     * @type {boolean}
     * @memberof MapPolylineDirective
     */
    Draggable: boolean;
    /**
     * If set to true, the user can edit this shape by dragging the control
     * points shown at the vertices and on each segment.
     *
     * @type {boolean}
     * @memberof MapPolylineDirective
     */
    Editable: boolean;
    /**
     * When true, edges of the polyline are interpreted as geodesic and will
     * follow the curvature of the Earth. When false, edges of the polyline are
     * rendered as straight lines in screen space. Note that the shape of a
     * geodesic polyline may appear to change when dragged, as the dimensions
     * are maintained relative to the surface of the earth. Defaults to false.
     *
     * @type {boolean}
     * @memberof MapPolylineDirective
     */
    Geodesic: boolean;
    /**
     * The ordered sequence of coordinates that designates a polyline.
     * Simple polylines may be defined using a single array of LatLngs. More
     * complex polylines may specify an array of arrays.
     *
     * @type {(Array<ILatLong>}
     * @memberof MapPolylineDirective
     */
    Path: Array<ILatLong> | Array<Array<ILatLong>>;
    /**
     * Whether to show the title of the polyline as the tooltip on the polygon.
     *
     * @type {boolean}
     * @memberof MapPolylineDirective
     */
    ShowTooltip: boolean;
    /**
     * The stroke color.
     *
     * @type {string}
     * @memberof MapPolylineDirective
     */
    StrokeColor: string;
    /**
     * The stroke opacity between 0.0 and 1.0
     *
     * @type {number}
     * @memberof MapPolylineDirective
     */
    StrokeOpacity: number;
    /**
     * The stroke width in pixels.
     *
     * @type {number}
     * @memberof MapPolylineDirective
     */
    StrokeWeight: number;
    /**
     * The title of the polygon.
     *
     * @type {string}
     * @memberof MapPolylineDirective
     */
    Title: string;
    /**
     * Whether this polyline is visible on the map. Defaults to true.
     *
     * @type {boolean}
     * @memberof MapPolylineDirective
     */
    Visible: boolean;
    /**
     * The zIndex compared to other polys.
     *
     * @type {number}
     * @memberof MapPolylineDirective
     */
    zIndex: number;
    /**
     * This event is fired when the DOM click event is fired on the Polyline.
     *
     *   @type {EventEmitter<MouseEvent>}
     * @memberof MapPolylineDirective
     */
    Click: EventEmitter<MouseEvent>;
    /**
     * This event is fired when the DOM dblclick event is fired on the Polyline.
     *
     * @type {EventEmitter<MouseEvent>}
     * @memberof MapPolylineDirective
     */
    DblClick: EventEmitter<MouseEvent>;
    /**
     * This event is repeatedly fired while the user drags the polyline.
     *
     * @type {EventEmitter<MouseEvent>}
     * @memberof MapPolylineDirective
     */
    Drag: EventEmitter<MouseEvent>;
    /**
     * This event is fired when the user stops dragging the polyline.
     *
     * @type {EventEmitter<MouseEvent>}
     * @memberof MapPolylineDirective
     */
    DragEnd: EventEmitter<MouseEvent>;
    /**
     * This event is fired when the user starts dragging the polyline.
     *
     * @type {EventEmitter<MouseEvent>}
     * @memberof MapPolylineDirective
     */
    DragStart: EventEmitter<MouseEvent>;
    /**
     * This event is fired when the DOM mousedown event is fired on the Polyline.
     *
     * @type {EventEmitter<MouseEvent>}
     * @memberof MapPolylineDirective
     */
    MouseDown: EventEmitter<MouseEvent>;
    /**
     * This event is fired when the DOM mousemove event is fired on the Polyline.
     *
     * @type {EventEmitter<MouseEvent>}
     * @memberof MapPolylineDirective
     */
    MouseMove: EventEmitter<MouseEvent>;
    /**
     * This event is fired on Polyline mouseout.
     *
     * @type {EventEmitter<MouseEvent>}
     * @memberof MapPolylineDirective
     */
    MouseOut: EventEmitter<MouseEvent>;
    /**
     * This event is fired on Polyline mouseover.
     *
     * @type {EventEmitter<MouseEvent>}
     * @memberof MapPolylineDirective
     */
    MouseOver: EventEmitter<MouseEvent>;
    /**
     * This event is fired whe the DOM mouseup event is fired on the Polyline
     *
     * @type {EventEmitter<MouseEvent>}
     * @memberof MapPolylineDirective
     */
    MouseUp: EventEmitter<MouseEvent>;
    /**
     * This even is fired when the Polyline is right-clicked on.
     *
     * @type {EventEmitter<MouseEvent>}
     * @memberof MapPolylineDirective
     */
    RightClick: EventEmitter<MouseEvent>;
    /**
     * Gets whether the polyline has been registered with the service.
     * @readonly
     * @type {boolean}
     * @memberof MapPolylineDirective
     */
    readonly AddedToService: boolean;
    /**
     * Get the id of the polyline.
     *
     * @readonly
     * @type {number}
     * @memberof MapPolylineDirective
     */
    readonly Id: number;
    /**
     * Gets the id of the polyline as a string.
     *
     * @readonly
     * @type {string}
     * @memberof MapPolylineDirective
     */
    readonly IdAsString: string;
    /**
     * Gets whether the polyline is in a custom layer. See {@link MapLayer}.
     *
     * @readonly
     * @type {boolean}
     * @memberof MapPolylineDirective
     */
    readonly InCustomLayer: boolean;
    /**
     * gets the id of the Layer the polyline belongs to.
     *
     * @readonly
     * @type {number}
     * @memberof MapPolylineDirective
     */
    readonly LayerId: number;
    /**
     * Creates an instance of MapPolylineDirective.
     * @param {PolylineManager} _polylineManager
     *
     * @memberof MapPolylineDirective
     */
    constructor(_polylineService: PolylineService, _containerRef: ViewContainerRef);
    /**
     * Called after the content intialization of the directive is complete. Part of the ng Component life cycle.
     *
     * @return {void}
     *
     * @memberof MapPolylineDirective
     */
    ngAfterContentInit(): void;
    /**
     * Called when changes to the databoud properties occur. Part of the ng Component life cycle.
     *
     * @param {{ [propName: string]: SimpleChange }} changes - Changes that have occured.
     * @return {void}
     *
     * @memberof MapPolylineDirective
     */
    ngOnChanges(changes: SimpleChanges): any;
    /**
     * Called when the polyline is being destroyed. Part of the ng Component life cycle. Release resources.
     *
     *
     * @memberof MapPolylineDirective
     */
    ngOnDestroy(): void;
    /**
     * Wires up the event receivers.
     *
     * @private
     *
     * @memberof MapPolylineDirective
     */
    private AddEventListeners();
    /**
     * Generates IPolyline option changeset from directive settings.
     *
     * @private
     * @param {SimpleChanges} changes - {@link SimpleChanges} identifying the changes that occured.
     * @returns {IPolylineOptions} - {@link IPolylineOptions} containing the polyline options.
     *
     * @memberof MapPolylineDirective
     */
    private GeneratePolylineChangeSet(changes);
}
