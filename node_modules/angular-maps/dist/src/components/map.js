"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var mapservicefactory_1 = require("../services/mapservicefactory");
var map_service_1 = require("../services/map.service");
var marker_service_1 = require("../services/marker.service");
var infobox_service_1 = require("../services/infobox.service");
var layer_service_1 = require("../services/layer.service");
var polygon_service_1 = require("../services/polygon.service");
var polyline_service_1 = require("../services/polyline.service");
var cluster_service_1 = require("../services/cluster.service");
var map_type_id_1 = require("../models/map-type-id");
var map_marker_1 = require("./map-marker");
/**
 * Renders a map based on a given provider.
 * **Important note**: To be able see a map in the browser, you have to define a height for the CSS
 * class `map-container`.
 *
 * ### Example
 * ```typescript
 * import {Component} from '@angular/core';
 * import {MapComponent} from '...';
 *
 * @Component({
 *  selector: 'my-map',
 *  styles: [`
 *    .map-container { height: 300px; }
 * `],
 *  template: `
 *    <x-map [Latitude]="lat" [Longitude]="lng" [Zoom]="zoom"></x-map>
 *  `
 * })
 * ```
 *
 * @export
 * @class MapComponent
 * @implements {OnChanges}
 * @implements {OnInit}
 * @implements {OnDestroy}
 */
var MapComponent = (function () {
    ///
    /// Constructor
    ///
    /**
     * Creates an instance of MapComponent.
     *
     * @param {MapService} _mapService - Concreted implementation of a map service for the underlying maps implementations.
     *                                   Generally provided via injections.
     * @memberof MapComponent
     */
    function MapComponent(_mapService) {
        this._mapService = _mapService;
        ///
        /// Field declarations
        ///
        this._longitude = 0;
        this._latitude = 0;
        this._zoom = 0;
        this._options = {};
        this._box = null;
        this._containerClass = true;
        /**
         * This event emitter is fired when the map bounding box changes.
         *
         * @type {EventEmitter<IBox>}
         * @memberof MapComponent
         */
        this.BoundsChange = new core_1.EventEmitter();
        /**
         * This event emitter is fired when the map center changes.
         *
         * @type {EventEmitter<ILatLong>}
         * @memberof MapComponent
         */
        this.CenterChange = new core_1.EventEmitter();
        /**
         * This event emitter gets emitted when the user clicks on the map (but not when they click on a
         * marker or infoWindow).
         *
         * @type {EventEmitter<MouseEvent>}
         * @memberof MapComponent
         */
        this.MapClick = new core_1.EventEmitter();
        /**
         * This event emitter gets emitted when the user double-clicks on the map (but not when they click
         * on a marker or infoWindow).
         *
         * @type {EventEmitter<MouseEvent>}
         * @memberof MapComponent
         */
        this.MapDblClick = new core_1.EventEmitter();
        /**
         * This event emitter gets emitted when the user right-clicks on the map (but not when they click
         * on a marker or infoWindow).
         *
         * @type {EventEmitter<MouseEvent>}
         * @memberof MapComponent
         */
        this.MapRightClick = new core_1.EventEmitter();
        /**
         * This event emitter gets emitted when the user double-clicks on the map (but not when they click
         * on a marker or infoWindow).
         *
         * @type {EventEmitter<MouseEvent>}
         * @memberof MapComponent
         */
        this.MapMouseOver = new core_1.EventEmitter();
        /**
         * This event emitter gets emitted when the user double-clicks on the map (but not when they click
         * on a marker or infoWindow).
         *
         * @type {EventEmitter<MouseEvent>}
         * @memberof MapComponent
         */
        this.MapMouseOut = new core_1.EventEmitter();
        /**
         * This event emitter gets emitted when the user double-clicks on the map (but not when they click
         * on a marker or infoWindow).
         *
         * @type {EventEmitter<MouseEvent>}
         * @memberof MapComponent
         */
        this.MapMouseMove = new core_1.EventEmitter();
        /**
         * This event emiiter is fired when the map zoom changes
         *
         * @type {EventEmitter<Number>}
         * @memberof MapComponent
         */
        this.ZoomChange = new core_1.EventEmitter();
    }
    Object.defineProperty(MapComponent.prototype, "Box", {
        ///
        /// Property declarations
        ///
        /**
         * Get or sets the maximum and minimum bounding box for map.
         *
         * @type {IBox}
         * @memberof MapComponent
         */
        get: function () { return this._box; },
        set: function (val) { this._box = val; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapComponent.prototype, "Latitude", {
        /**
         * Gets or sets the latitude that sets the center of the map.
         *
         * @type {(number | string)}
         * @memberof MapComponent
         */
        get: function () { return this._longitude; },
        set: function (value) {
            this._latitude = this.ConvertToDecimal(value);
            this.UpdateCenter();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapComponent.prototype, "Longitude", {
        /**
         * Gets or sets the longitude that sets the center of the map.
         *
         * @type {(number| string)}
         * @memberof MapComponent
         */
        get: function () { return this._longitude; },
        set: function (value) {
            this._longitude = this.ConvertToDecimal(value);
            this.UpdateCenter();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapComponent.prototype, "Options", {
        /**
         * Gets or sets general map Options
         *
         * @type {IMapOptions}
         * @memberof MapComponent
         */
        get: function () { return this._options; },
        set: function (val) { this._options = val; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(MapComponent.prototype, "Zoom", {
        /**
         * Gets or sets the zoom level of the map. The default value is `8`.
         *
         * @type {(number | string)}
         * @memberof MapComponent
         */
        get: function () { return this._zoom; },
        set: function (value) {
            this._zoom = this.ConvertToDecimal(value, 8);
            if (typeof this._zoom === 'number') {
                this._mapService.SetZoom(this._zoom);
            }
        },
        enumerable: true,
        configurable: true
    });
    ///
    /// Public methods
    ///
    /**
     * Called on Component initialization. Part of ng Component life cycle.
     *
     * @returns {void}
     *
     * @memberof MapComponent
     */
    MapComponent.prototype.ngOnInit = function () {
        this.InitMapInstance(this._container.nativeElement);
    };
    /**
     * Called when changes to the databoud properties occur. Part of the ng Component life cycle.
     *
     * @param {{ [propName: string]: SimpleChange }} changes - Changes that have occured.
     * @return {void}
     *
     * @memberof MapComponent
     */
    MapComponent.prototype.ngOnChanges = function (changes) {
        if (this._mapPromise) {
            if (changes['Box']) {
                if (this._box != null) {
                    this._mapService.SetViewOptions({
                        bounds: this._box
                    });
                }
            }
            if (changes['Options']) {
                this._mapService.SetMapOptions(this._options);
            }
        }
    };
    /**
     * Called on component destruction. Frees the resources used by the component. Part of the ng Component life cycle.
     *
     * @returns {void}
     *
     * @memberof MapComponent
     */
    MapComponent.prototype.ngOnDestroy = function () {
        this._mapService.DisposeMap();
    };
    /**
     * Triggers a resize event on the map instance.
     *
     * @returns {Promise<void>} - A promise that gets resolved after the event was triggered.
     *
     * @memberof MapComponent
     */
    MapComponent.prototype.TriggerResize = function () {
        var _this = this;
        // Note: When we would trigger the resize event and show the map in the same turn (which is a
        // common case for triggering a resize event), then the resize event would not
        // work (to show the map), so we trigger the event in a timeout.
        return new Promise(function (resolve) {
            setTimeout(function () { return _this._mapService.TriggerMapEvent('resize').then(function () { return resolve(); }); });
        });
    };
    ///
    /// Private methods.
    ///
    /**
     * Converts a number-ish value to a number.
     *
     * @private
     * @param {(string | number)} value - The value to convert.
     * @param {number} [defaultValue=null] - Default value to use if the conversion cannot be performed.
     * @returns {number} - Converted number of the default.
     *
     * @memberof MapComponent
     */
    MapComponent.prototype.ConvertToDecimal = function (value, defaultValue) {
        if (defaultValue === void 0) { defaultValue = null; }
        if (typeof value === 'string') {
            return parseFloat(value);
        }
        else if (typeof value === 'number') {
            return value;
        }
        return defaultValue;
    };
    /**
     * Delegate handling the map click events.
     *
     * @private
     *
     * @memberof MapComponent
     */
    MapComponent.prototype.HandleMapClickEvents = function () {
        var _this = this;
        this._mapService.SubscribeToMapEvent('click').subscribe(function (e) {
            //
            // this is necessary since bing will treat a doubleclick first as two clicks...'
            ///
            _this._clickTimeout = setTimeout(function () {
                _this.MapClick.emit(e);
            }, 300);
        });
        this._mapService.SubscribeToMapEvent('dblclick').subscribe(function (e) {
            if (_this._clickTimeout) {
                clearTimeout(_this._clickTimeout);
            }
            _this.MapDblClick.emit(e);
        });
        this._mapService.SubscribeToMapEvent('rightclick').subscribe(function (e) {
            _this.MapRightClick.emit(e);
        });
        this._mapService.SubscribeToMapEvent('mouseover').subscribe(function (e) {
            _this.MapMouseOver.emit(e);
        });
        this._mapService.SubscribeToMapEvent('mouseout').subscribe(function (e) {
            _this.MapMouseOut.emit(e);
        });
        this._mapService.SubscribeToMapEvent('mousemove').subscribe(function (e) {
            _this.MapMouseMove.emit(e);
        });
    };
    /**
     * Delegate handling map center change events.
     *
     * @private
     *
     * @memberof MapComponent
     */
    MapComponent.prototype.HandleMapBoundsChange = function () {
        var _this = this;
        this._mapService.SubscribeToMapEvent('boundschanged').subscribe(function () {
            _this._mapService.GetBounds().then(function (bounds) {
                _this.BoundsChange.emit(bounds);
            });
        });
    };
    /**
     * Delegate handling map center change events.
     *
     * @private
     *
     * @memberof MapComponent
     */
    MapComponent.prototype.HandleMapCenterChange = function () {
        var _this = this;
        this._mapService.SubscribeToMapEvent('centerchanged').subscribe(function () {
            _this._mapService.GetCenter().then(function (center) {
                if (_this._latitude !== center.latitude || _this._longitude !== center.longitude) {
                    _this._latitude = center.latitude;
                    _this._longitude = center.longitude;
                    _this.CenterChange.emit({ latitude: _this._latitude, longitude: _this._longitude });
                }
            });
        });
    };
    /**
     * Delegate handling map zoom change events.
     *
     * @private
     *
     * @memberof MapComponent
     */
    MapComponent.prototype.HandleMapZoomChange = function () {
        var _this = this;
        this._mapService.SubscribeToMapEvent('zoomchanged').subscribe(function () {
            _this._mapService.GetZoom().then(function (z) {
                if (_this._zoom !== z) {
                    _this._zoom = z;
                    _this.ZoomChange.emit(z);
                }
            });
        });
    };
    /**
     * Initializes the map.
     *
     * @private
     * @param {HTMLElement} el - Html elements which will host the map canvas.
     *
     * @memberof MapComponent
     */
    MapComponent.prototype.InitMapInstance = function (el) {
        if (this._options.center == null) {
            this._options.center = { latitude: this._latitude, longitude: this._longitude };
        }
        if (this._options.zoom == null) {
            this._options.zoom = this._zoom;
        }
        if (this._options.mapTypeId == null) {
            this._options.mapTypeId = map_type_id_1.MapTypeId.hybrid;
        }
        if (this._box != null) {
            this._options.bounds = this._box;
        }
        this._mapPromise = this._mapService.CreateMap(el, this._options);
        this.HandleMapCenterChange();
        this.HandleMapBoundsChange();
        this.HandleMapZoomChange();
        this.HandleMapClickEvents();
    };
    /**
     * Updates the map center based on the geo properties of the component.
     *
     * @private
     * @returns {void}
     *
     * @memberof MapComponent
     */
    MapComponent.prototype.UpdateCenter = function () {
        if (typeof this._latitude !== 'number' || typeof this._longitude !== 'number') {
            return;
        }
        this._mapService.SetCenter({
            latitude: this._latitude,
            longitude: this._longitude,
        });
    };
    return MapComponent;
}());
MapComponent.decorators = [
    { type: core_1.Component, args: [{
                selector: 'x-map',
                providers: [
                    { provide: map_service_1.MapService, deps: [mapservicefactory_1.MapServiceFactory], useFactory: MapServiceCreator },
                    { provide: marker_service_1.MarkerService, deps: [mapservicefactory_1.MapServiceFactory, map_service_1.MapService, layer_service_1.LayerService, cluster_service_1.ClusterService], useFactory: MarkerServiceFactory },
                    {
                        provide: infobox_service_1.InfoBoxService, deps: [mapservicefactory_1.MapServiceFactory, map_service_1.MapService,
                            marker_service_1.MarkerService], useFactory: InfoBoxServiceFactory
                    },
                    { provide: layer_service_1.LayerService, deps: [mapservicefactory_1.MapServiceFactory, map_service_1.MapService], useFactory: LayerServiceFactory },
                    { provide: cluster_service_1.ClusterService, deps: [mapservicefactory_1.MapServiceFactory, map_service_1.MapService], useFactory: ClusterServiceFactory },
                    { provide: polygon_service_1.PolygonService, deps: [mapservicefactory_1.MapServiceFactory, map_service_1.MapService, layer_service_1.LayerService], useFactory: PolygonServiceFactory },
                    { provide: polyline_service_1.PolylineService, deps: [mapservicefactory_1.MapServiceFactory, map_service_1.MapService, layer_service_1.LayerService], useFactory: PolylineServiceFactory }
                ],
                template: "\n        <div #container class='map-container-inner'></div>\n        <div class='map-content'>\n            <ng-content></ng-content>\n        </div>\n    ",
                styles: ["\n        .map-container-inner { width: inherit; height: inherit; }\n        .map-container-inner div { background-repeat: no-repeat; }\n        .map-content { display:none; }\n    "],
                encapsulation: core_1.ViewEncapsulation.None
            },] },
];
/** @nocollapse */
MapComponent.ctorParameters = function () { return [
    { type: map_service_1.MapService, },
]; };
MapComponent.propDecorators = {
    '_containerClass': [{ type: core_1.HostBinding, args: ['class.map-container',] },],
    '_container': [{ type: core_1.ViewChild, args: ['container',] },],
    '_markers': [{ type: core_1.ContentChildren, args: [map_marker_1.MapMarkerDirective,] },],
    'Box': [{ type: core_1.Input },],
    'Latitude': [{ type: core_1.Input },],
    'Longitude': [{ type: core_1.Input },],
    'Options': [{ type: core_1.Input },],
    'Zoom': [{ type: core_1.Input },],
    'BoundsChange': [{ type: core_1.Output },],
    'CenterChange': [{ type: core_1.Output },],
    'MapClick': [{ type: core_1.Output },],
    'MapDblClick': [{ type: core_1.Output },],
    'MapRightClick': [{ type: core_1.Output },],
    'MapMouseOver': [{ type: core_1.Output },],
    'MapMouseOut': [{ type: core_1.Output },],
    'MapMouseMove': [{ type: core_1.Output },],
    'ZoomChange': [{ type: core_1.Output },],
};
exports.MapComponent = MapComponent;
/**
 * Factory function to generate a cluster service instance. This is necessary because of constraints with AOT that do no allow
 * us to use lamda functions inline.
 *
 * @export
 * @param {MapServiceFactory} f - The {@link MapServiceFactory} implementation.
 * @param {MapService} m - A {@link MapService} instance.
 * @returns {ClusterService} - A concrete instance of a Cluster Service based on the underlying map architecture
 */
function ClusterServiceFactory(f, m) { return f.CreateClusterService(m); }
exports.ClusterServiceFactory = ClusterServiceFactory;
/**
 * Factory function to generate a infobox service instance. This is necessary because of constraints with AOT that do no allow
 * us to use lamda functions inline.
 *
 * @export
 * @param {MapServiceFactory} f - The {@link MapServiceFactory} implementation.
 * @param {MapService} m - A {@link MapService} instance.
 * @param {MarkerService} m - A {@link MarkerService} instance.
 * @returns {InfoBoxService} - A concrete instance of a InfoBox Service based on the underlying map architecture.
 */
function InfoBoxServiceFactory(f, m, ma) { return f.CreateInfoBoxService(m, ma); }
exports.InfoBoxServiceFactory = InfoBoxServiceFactory;
/**
 * Factory function to generate a layer service instance. This is necessary because of constraints with AOT that do no allow
 * us to use lamda functions inline.
 *
 * @export
 * @param {MapServiceFactory} f - The {@link MapServiceFactory} implementation.
 * @param {MapService} m - A {@link MapService} instance.
 * @returns {LayerService} - - A concrete instance of a Layer Service based on the underlying map architecture.
 */
function LayerServiceFactory(f, m) { return f.CreateLayerService(m); }
exports.LayerServiceFactory = LayerServiceFactory;
/**
 * Factory function to generate a map service instance. This is necessary because of constraints with AOT that do no allow
 * us to use lamda functions inline.
 *
 * @export
 * @param {MapServiceFactory} f - The {@link MapServiceFactory} implementation.
 * @returns {MapService} - A concrete instance of a MapService based on the underlying map architecture.
 */
function MapServiceCreator(f) { return f.Create(); }
exports.MapServiceCreator = MapServiceCreator;
/**
 * Factory function to generate a marker service instance. This is necessary because of constraints with AOT that do no allow
 * us to use lamda functions inline.
 *
 * @export
 * @param {MapServiceFactory} f - The {@link MapServiceFactory} implementation.
 * @param {MapService} m - A {@link MapService} instance.
 * @param {LayerService} l - A {@link LayerService} instance.
 * @param {ClusterService} c - A {@link ClusterService} instance.
 * @returns {MarkerService} - A concrete instance of a Marker Service based on the underlying map architecture.
 */
function MarkerServiceFactory(f, m, l, c) {
    return f.CreateMarkerService(m, l, c);
}
exports.MarkerServiceFactory = MarkerServiceFactory;
/**
 * Factory function to generate a polygon service instance. This is necessary because of constraints with AOT that do no allow
 * us to use lamda functions inline.
 *
 * @export
 * @param {MapServiceFactory} f - The {@link MapServiceFactory} implementation.
 * @param {MapService} m - A {@link MapService} instance.
 * @param {LayerService} l - A {@link LayerService} instance.
 * @returns {PolygonService} - A concrete instance of a Polygon Service based on the underlying map architecture.
 */
function PolygonServiceFactory(f, m, l) {
    return f.CreatePolygonService(m, l);
}
exports.PolygonServiceFactory = PolygonServiceFactory;
/**
 * Factory function to generate a polyline service instance. This is necessary because of constraints with AOT that do no allow
 * us to use lamda functions inline.
 *
 * @export
 * @param {MapServiceFactory} f - The {@link MapServiceFactory} implementation.
 * @param {MapService} m - A {@link MapService} instance.
 * @param {LayerService} l - A {@link LayerService} instance.
 * @returns {PolylineService} - A concrete instance of a Polyline Service based on the underlying map architecture.
 */
function PolylineServiceFactory(f, m, l) {
    return f.CreatePolylineService(m, l);
}
exports.PolylineServiceFactory = PolylineServiceFactory;
//# sourceMappingURL=map.js.map