"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var bing_conversions_1 = require("./../../services/bing/bing-conversions");
/**
 * Concrete implementation of the {@link InfoWindow} contract for the Bing Maps V8 map architecture.
 *
 * @class BingInfoWindow
 * @implements {InfoWindow}
 * @export
 */
var BingInfoWindow = (function () {
    /**
     * Creates an instance of BingInfoWindow.
     * @param {Microsoft.Maps.Infobox} _infoBox - A {@link Microsoft.Maps.Infobox} instance underlying the model
     * @memberof BingInfoWindow
     * @constructor
     * @public
     */
    function BingInfoWindow(_infoBox) {
        this._infoBox = _infoBox;
        this._isOpen = false;
    }
    Object.defineProperty(BingInfoWindow.prototype, "IsOpen", {
        /**
         * Gets whether the info box is currently open.
         *
         * @readonly
         * @type {boolean}
         * @memberof BingInfoWindow
         */
        get: function () {
            if (this._infoBox && this._infoBox.getOptions().visible === true) {
                return true;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BingInfoWindow.prototype, "NativePrimitve", {
        /**
         * Gets native primitve underlying the model.
         *
         * @type {Microsoft.Maps.Infobox}
         * @memberof BingInfoWindow
         * @property
         * @readonly
         * @public
         */
        get: function () {
            return this._infoBox;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds an event listener to the InfoWindow.
     *
     * @param {string} eventType - String containing the event for which to register the listener (e.g. "click")
     * @param {Function} fn - Delegate invoked when the event occurs.
     *
     * @memberof BingInfoWindow
     * @method
     * @public
     */
    BingInfoWindow.prototype.AddListener = function (eventType, fn) {
        var _this = this;
        Microsoft.Maps.Events.addHandler(this._infoBox, eventType, function (e) {
            if (e.eventName === 'infoboxChanged') {
                if (_this._infoBox.getOptions().visible === true) {
                    _this._isOpen = true;
                }
                else {
                    if (_this._infoBox.getOptions().visible === false && _this._isOpen === true) {
                        _this._isOpen = false;
                        fn(e);
                    }
                }
            }
            else {
                fn(e);
            }
        });
    };
    /**
     * Closes the info window.
     *
     * @memberof BingInfoWindow
     * @method
     * @public
     */
    BingInfoWindow.prototype.Close = function () {
        var o = {};
        o.visible = false;
        this._infoBox.setOptions(o);
    };
    ;
    /**
     * Gets the position of the info window.
     *
     * @returns {ILatLong} - Returns the geo coordinates of the info window.
     * @memberof BingInfoWindow
     * @method
     * @public
     */
    BingInfoWindow.prototype.GetPosition = function () {
        var p = {
            latitude: this._infoBox.getLocation().latitude,
            longitude: this._infoBox.getLocation().longitude
        };
        return p;
    };
    ;
    /**
     * Opens the info window.
     *
     * @memberof BingInfoWindow
     * @method
     * @public
     */
    BingInfoWindow.prototype.Open = function () {
        var o = {};
        o.visible = true;
        this._infoBox.setOptions(o);
    };
    ;
    /**
     * Sets the info window options.
     *
     * @param {IInfoWindowOptions} options - Info window options to set. The options will be merged with any existing options.
     *
     * @memberof BingInfoWindow
     * @method
     * @public
     */
    BingInfoWindow.prototype.SetOptions = function (options) {
        var o = bing_conversions_1.BingConversions.TranslateInfoBoxOptions(options);
        this._infoBox.setOptions(o);
    };
    ;
    /**
     * Sets the info window position.
     *
     * @param {ILatLong} position - Geo coordinates to move the anchor of the info window to.
     *
     * @memberof BingInfoWindow
     * @method
     * @public
     */
    BingInfoWindow.prototype.SetPosition = function (position) {
        var l = bing_conversions_1.BingConversions.TranslateLocation(position);
        this._infoBox.setLocation(l);
    };
    ;
    return BingInfoWindow;
}());
exports.BingInfoWindow = BingInfoWindow;
//# sourceMappingURL=bing-info-window.js.map