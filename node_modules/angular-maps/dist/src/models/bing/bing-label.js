"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var map_label_1 = require("../map-label");
/**
 * Implements map a labled to be placed on the map.
 *
 * @export
 * @extends Microsoft.Maps.CustomOverlay
 * @extends MapLabel
 * @class BingMapLabel
 */
var BingMapLabel = (function (_super) {
    __extends(BingMapLabel, _super);
    ///
    /// Constructor
    ///
    /**
     * Creates a new MapLabel
     * @extends Microsoft.Maps.CustomOverlay
     * @extends MapLabel
     * @param {{ [key: string]: any }} opt_options Optional properties to set.
     * @constructor
     * @public
     */
    function BingMapLabel(options) {
        var _this = _super.call(this, options) || this;
        _this._options.beneathLabels = false;
        return _this;
    }
    ///
    /// Public methods
    ///
    /**
     * Gets the value of a setting.
     *
     * @param {string} key - Key specifying the setting.
     * @returns {*} - The value of the setting.
     * @memberof BingMapLabel
     * @public
     * @method
     */
    BingMapLabel.prototype.Get = function (key) {
        return this[key];
    };
    /**
     * Gets the map associted with the label.
     *
     * @returns {Microsoft.Maps.Map}
     * @memberof BingMapLabel
     * @method
     * @public
     */
    BingMapLabel.prototype.GetMap = function () {
        return this.getMap();
    };
    /**
     * Set the value for a setting.
     *
     * @param {string} key - Key specifying the setting.
     * @param {*} val - The value to set.
     * @memberof BingMapLabel
     * @public
     * @method
     */
    BingMapLabel.prototype.Set = function (key, val) {
        if (this.Get(key) !== val) {
            this[key] = val;
            this.Changed(key);
        }
    };
    /**
     * Sets the map for the label. Settings this to null remove the label from hte map.
     *
     * @param {Microsoft.Maps.Map} map - Map to associated with the label.
     * @memberof BingMapLabel
     * @method
     * @public
     */
    BingMapLabel.prototype.SetMap = function (map) {
        var m = this.GetMap();
        if (map === m) {
            return;
        }
        if (m) {
            m.layers.remove(this);
        }
        if (map != null) {
            map.layers.insert(this);
        }
    };
    /**
     * Applies settings to the object
     *
     * @param {{ [key: string]: any }} options - An object containing the settings key value pairs.
     * @memberof BingMapLabel
     * @public
     * @method
     */
    BingMapLabel.prototype.SetValues = function (options) {
        var p = new Array();
        for (var key in options) {
            if (this.Get(key) !== options[key]) {
                this[key] = options[key];
                p.push(key);
            }
        }
        if (p.length > 0) {
            this.Changed(p);
        }
    };
    ///
    /// Protected methods
    ///
    /**
     * Draws the label on the map.
     * @memberof BingMapLabel
     * @method
     * @protected
     */
    BingMapLabel.prototype.Draw = function () {
        var visibility = this.GetVisible();
        var m = this.GetMap();
        if (!this._canvas) {
            return;
        }
        if (!m) {
            return;
        }
        var style = this._canvas.style;
        if (visibility !== '') {
            // label is not visible, don't calculate positions etc.
            style['visibility'] = visibility;
            return;
        }
        var offset = this.Get('offset');
        var latLng = this.Get('position');
        if (!latLng) {
            return;
        }
        if (!offset) {
            offset = new Microsoft.Maps.Point(0, 0);
        }
        var pos = m.tryLocationToPixel(latLng, Microsoft.Maps.PixelReference.control);
        style['top'] = (pos.y + offset.y) + 'px';
        style['left'] = (pos.x + offset.x) + 'px';
        style['visibility'] = visibility;
    };
    ;
    /**
     * Delegate called when the label is added to the map. Generates and configures
     * the canvas.
     *
     * @memberof BingMapLabel
     * @method
     * @protected
     */
    BingMapLabel.prototype.OnAdd = function () {
        this._canvas = document.createElement('canvas');
        var style = this._canvas.style;
        style.position = 'absolute';
        var ctx = this._canvas.getContext('2d');
        ctx.lineJoin = 'round';
        ctx.textBaseline = 'top';
        this.setHtmlElement(this._canvas);
    };
    ///
    /// Private methods
    ///
    /**
     * Delegate callled when the label is loaded
     * @memberof BingMapLabel
     * @method
     * @private
     */
    BingMapLabel.prototype.OnLoad = function () {
        var _this = this;
        Microsoft.Maps.Events.addHandler(this.GetMap(), 'viewchange', function () {
            _this.Changed('position');
        });
        this.DrawCanvas();
        this.Draw();
    };
    return BingMapLabel;
}(map_label_1.MapLabel));
exports.BingMapLabel = BingMapLabel;
/**
 * Helper function to extend the CustomOverlay into the MapLabel
 *
 * @export
 * @method
 */
function ExtendMapLabelWithOverlayView() {
    var x = BingMapLabel.prototype;
    BingMapLabel.prototype = new Microsoft.Maps.CustomOverlay();
    for (var y in x) {
        if (x[y] != null) {
            BingMapLabel.prototype[y] = x[y];
        }
    }
    BingMapLabel.prototype['onAdd'] = x['OnAdd'];
    BingMapLabel.prototype['onLoad'] = x['OnLoad'];
    BingMapLabel.prototype['onRemove'] = x['OnRemove'];
}
exports.ExtendMapLabelWithOverlayView = ExtendMapLabelWithOverlayView;
//# sourceMappingURL=bing-label.js.map