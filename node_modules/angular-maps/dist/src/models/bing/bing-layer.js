"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Concrete implementation of a map layer for the Bing Map Provider.
 *
 * @export
 * @class BingLayer
 * @implements {Layer}
 */
var BingLayer = (function () {
    ///
    /// Constructor
    ///
    /**
     * Creates a new instance of the BingClusterLayer class.
     *
     * @param _layer Microsoft.Maps.ClusterLayer. Native Bing Cluster Layer supporting the cluster layer.
     * @param _maps MapService. MapService implementation to leverage for the layer.
     *
     * @memberof BingLayer
     */
    function BingLayer(_layer, _maps) {
        this._layer = _layer;
        this._maps = _maps;
    }
    Object.defineProperty(BingLayer.prototype, "NativePrimitve", {
        ///
        /// Property definitions
        ///
        /**
         * Get the native primitive underneath the abstraction layer.
         *
         * @returns Microsoft.Maps.Layer.
         *
         * @memberof BingLayer
         */
        get: function () {
            return this._layer;
        },
        enumerable: true,
        configurable: true
    });
    ///
    /// Public methods, Layer interface implementation
    ///
    /**
     * Adds an event listener for the layer.
     *
     * @param eventType string. Type of event to add (click, mouseover, etc). You can use any event that the underlying native
     * layer supports.
     * @param fn function. Handler to call when the event occurs.
     *
     * @memberof BingLayer
     */
    BingLayer.prototype.AddListener = function (eventType, fn) {
        Microsoft.Maps.Events.addHandler(this._layer, eventType, function (e) {
            fn(e);
        });
    };
    /**
     * Adds an entity to the layer.
     *
     * @param entity Marker|InfoWindow|any. Entity to add to the layer.
     *
     * @memberof BingLayer
     */
    BingLayer.prototype.AddEntity = function (entity) {
        if (entity.NativePrimitve) {
            this._layer.add(entity.NativePrimitve);
        }
    };
    /**
     * Deletes the layer.
     *
     * @memberof BingLayer
     */
    BingLayer.prototype.Delete = function () {
        this._maps.DeleteLayer(this);
        this._layer.dispose();
    };
    /**
     * Returns the options governing the behavior of the layer.
     *
     * @returns IClusterOptions. The layer options.
     *
     * @memberof BingLayer
     */
    BingLayer.prototype.GetOptions = function () {
        var o = {
            id: Number(this._layer.getId())
        };
        return o;
    };
    /**
     * Returns the visibility state of the layer.
     *
     * @returns Boolean. True is the layer is visible, false otherwise.
     *
     * @memberof BingLayer
     */
    BingLayer.prototype.GetVisible = function () {
        return this._layer.getVisible();
    };
    /**
     * Removes an entity from the cluster layer.
     *
     * @param entity Marker|InfoWindow|any Entity to be removed from the layer.
     *
     * @memberof BingLayer
     */
    BingLayer.prototype.RemoveEntity = function (entity) {
        if (entity.NativePrimitve) {
            this._layer.remove(entity.NativePrimitve);
        }
    };
    /**
     * Sets the entities for the cluster layer.
     *
     * @param entities Array<Marker>|Array<InfoWindow>|Array<any> containing the entities to add to the cluster.
     * This replaces any existing entities.
     *
     * @memberof BingLayer
     */
    BingLayer.prototype.SetEntities = function (entities) {
        var p = new Array();
        entities.forEach(function (e) {
            if (e.NativePrimitve) {
                p.push(e.NativePrimitve);
            }
        });
        this._layer.setPrimitives(p);
    };
    /**
     * Sets the options for the cluster layer.
     *
     * @param options IClusterOptions containing the options enumeration controlling the layer behavior. The supplied options
     * are merged with the default/existing options.
     *
     * @memberof BingLayer
     */
    BingLayer.prototype.SetOptions = function (options) {
        this._layer.id = options.id.toString();
    };
    /**
     * Toggles the cluster layer visibility.
     *
     * @param visible Boolean true to make the layer visible, false to hide the layer.
     *
     * @memberof BingClusterLayer
     */
    BingLayer.prototype.SetVisible = function (visible) {
        this._layer.setVisible(visible);
    };
    return BingLayer;
}());
exports.BingLayer = BingLayer;
//# sourceMappingURL=bing-layer.js.map