"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var bing_conversions_1 = require("./../../services/bing/bing-conversions");
/**
 * Concrete implementation of the {@link Marker} contract for the Bing Maps V8 map architecture.
 *
 * @export
 * @class BingMarker
 * @implements {Marker}
 */
var BingMarker = (function () {
    ///
    /// Constructor
    ///
    /**
     * Creates an instance of BingMarker.
     * @param {Microsoft.Maps.Pushpin} _pushpin - The {@link Microsoft.Maps.Pushpin} underlying the model.
     *
     * @memberof BingMarker
     */
    function BingMarker(_pushpin) {
        this._pushpin = _pushpin;
        ///
        /// Field definitions
        ///
        this._metadata = new Map();
        this._isFirst = false;
        this._isLast = true;
    }
    Object.defineProperty(BingMarker.prototype, "IsFirst", {
        ///
        /// Property definitions
        ///
        /**
         * Indicates that the marker is the first marker in a set.
         *
         * @type {boolean}
         * @memberof Marker
         */
        get: function () { return this._isFirst; },
        set: function (val) { this._isFirst = val; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BingMarker.prototype, "IsLast", {
        /**
         * Indicates that the marker is the last marker in the set.
         *
         * @type {boolean}
         * @memberof Marker
         */
        get: function () { return this._isLast; },
        set: function (val) { this._isLast = val; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BingMarker.prototype, "Location", {
        /**
         * Gets the Location of the marker
         *
         * @readonly
         * @type {ILatLong}
         * @memberof BingMarker
         */
        get: function () {
            var l = this._pushpin.getLocation();
            return {
                latitude: l.latitude,
                longitude: l.longitude
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BingMarker.prototype, "Metadata", {
        /**
         * Gets the marker metadata.
         *
         * @readonly
         * @type {Map<string, any>}
         * @memberof BingMarker
         */
        get: function () { return this._metadata; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BingMarker.prototype, "NativePrimitve", {
        /**
         * Gets the native primitve implementing the marker, in this case {@link Microsoft.Maps.Pushpin}
         *
         * @readonly
         * @type {*}
         * @memberof BingMarker
         */
        get: function () { return this._pushpin; },
        enumerable: true,
        configurable: true
    });
    ///
    /// Public methods
    ///
    /**
     * Adds an event listener to the marker.
     *
     * @abstract
     * @param {string} eventType - String containing the event for which to register the listener (e.g. "click")
     * @param {Function} fn - Delegate invoked when the event occurs.
     *
     * @memberof BingMarker
     */
    BingMarker.prototype.AddListener = function (eventType, fn) {
        Microsoft.Maps.Events.addHandler(this._pushpin, eventType, function (e) {
            fn(e);
        });
    };
    /**
     * Deletes the marker.
     *
     * @abstract
     *
     * @memberof BingMarker
     */
    BingMarker.prototype.DeleteMarker = function () {
        var o = {};
        o.visible = false;
        this._pushpin.setOptions(o);
    };
    /**
     * Gets the marker label
     *
     * @abstract
     * @returns {string}
     *
     * @memberof BingMarker
     */
    BingMarker.prototype.GetLabel = function () {
        return this._pushpin.getText();
    };
    /**
     * Gets whether the marker is visible.
     *
     * @returns {boolean} - True if the marker is visible, false otherwise.
     *
     * @memberof BingMarker
     */
    BingMarker.prototype.GetVisible = function () {
        return this._pushpin.getVisible();
    };
    /**
     * Sets the anchor for the marker. Use this to adjust the root location for the marker to accomodate various marker image sizes.
     *
     * @abstract
     * @param {IPoint} anchor - Point coordinates for the marker anchor.
     *
     * @memberof BingMarker
     */
    BingMarker.prototype.SetAnchor = function (anchor) {
        var o = {};
        o.anchor = new Microsoft.Maps.Point(anchor.x, anchor.y);
        this._pushpin.setOptions(o);
    };
    /**
     * Sets the draggability of a marker.
     *
     * @abstract
     * @param {boolean} draggable - True to mark the marker as draggable, false otherwise.
     *
     * @memberof BingMarker
     */
    BingMarker.prototype.SetDraggable = function (draggable) {
        var o = {};
        o.draggable = draggable;
        this._pushpin.setOptions(o);
    };
    /**
     * Sets the icon for the marker.
     *
     * @abstract
     * @param {string} icon - String containing the icon in various forms (url, data url, etc.)
     *
     * @memberof BingMarker
     */
    BingMarker.prototype.SetIcon = function (icon) {
        var o = {};
        o.icon = icon;
        this._pushpin.setOptions(o);
    };
    /**
     * Sets the marker label.
     *
     * @abstract
     * @param {string} label - String containing the label to set.
     *
     * @memberof BingMarker
     */
    BingMarker.prototype.SetLabel = function (label) {
        var o = {};
        o.text = label;
        this._pushpin.setOptions(o);
    };
    /**
     * Sets the marker position.
     *
     * @abstract
     * @param {ILatLong} latLng - Geo coordinates to set the marker position to.
     *
     * @memberof BingMarker
     */
    BingMarker.prototype.SetPosition = function (latLng) {
        var p = bing_conversions_1.BingConversions.TranslateLocation(latLng);
        this._pushpin.setLocation(p);
    };
    /**
     * Sets the marker title.
     *
     * @abstract
     * @param {string} title - String containing the title to set.
     *
     * @memberof BingMarker
     */
    BingMarker.prototype.SetTitle = function (title) {
        var o = {};
        o.title = title;
        this._pushpin.setOptions(o);
    };
    /**
     * Sets the marker options.
     *
     * @abstract
     * @param {IMarkerOptions} options - {@link IMarkerOptions} object containing the marker options to set. The supplied options are
     * merged with the underlying marker options.
     * @memberof Marker
     */
    BingMarker.prototype.SetOptions = function (options) {
        var _this = this;
        bing_conversions_1.BingConversions.TranslateMarkerOptions(options).then(function (o) {
            _this._pushpin.setOptions(o);
        });
    };
    /**
     * Sets whether the marker is visible.
     *
     * @param {boolean} visible - True to set the marker visible, false otherwise.
     *
     * @memberof Marker
     */
    BingMarker.prototype.SetVisible = function (visible) {
        var o = {};
        o.visible = visible;
        this._pushpin.setOptions(o);
    };
    return BingMarker;
}());
exports.BingMarker = BingMarker;
//# sourceMappingURL=bing-marker.js.map