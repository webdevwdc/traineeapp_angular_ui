"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var bing_conversions_1 = require("../../services/bing/bing-conversions");
var bing_label_1 = require("./bing-label");
/**
 * Concrete implementation for a polyline model for Bing Maps V8.
 *
 * @export
 * @implements Polyline
 * @class BingPolyline
 */
var BingPolyline = (function () {
    ///
    /// constructor
    ///
    /**
     * Creates an instance of BingPolygon.
     * @param {Microsoft.Maps.Polyline} _polyline - The {@link Microsoft.Maps.Polyline} underlying the model.
     * @param {Microsoft.Maps.Map} _map - The context map.
     * @param {Microsoft.Maps.Layer} _layer - The context layer.
     * @memberof BingPolyline
     */
    function BingPolyline(_polyline, _map, _layer) {
        this._polyline = _polyline;
        this._map = _map;
        this._layer = _layer;
        ///
        /// Field declarations
        ///
        this._isEditable = true;
        ///
        /// Property declarations
        ///
        this._title = '';
        this._showTooltip = false;
        this._tooltip = null;
        this._hasToolTipReceiver = false;
        this._tooltipVisible = false;
    }
    Object.defineProperty(BingPolyline.prototype, "NativePrimitve", {
        /**
         * Gets the Navitve Polyline underlying the model
         *
         * @readonly
         * @type {Microsoft.MapConstructor.Polyline}
         * @memberof BingPolyline
         */
        get: function () { return this._polyline; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BingPolyline.prototype, "ShowTooltip", {
        /**
         * Gets or sets whether to show the tooltip
         *
         * @abstract
         * @type {boolean}
         * @memberof BingPolyline
         * @property
         * @public
         */
        get: function () { return this._showTooltip; },
        set: function (val) {
            this._showTooltip = val;
            this.ManageTooltip();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BingPolyline.prototype, "Title", {
        /**
         * Gets or sets the title off the polyline
         *
         * @abstract
         * @type {string}
         * @memberof BingPolyline
         * @property
         * @public
         */
        get: function () { return this._title; },
        set: function (val) {
            this._title = val;
            this.ManageTooltip();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Adds a delegate for an event.
     *
     * @param {string} eventType - String containing the event name.
     * @param fn - Delegate function to execute when the event occurs.
     * @memberof BingPolyline
     */
    BingPolyline.prototype.AddListener = function (eventType, fn) {
        Microsoft.Maps.Events.addHandler(this._polyline, eventType, function (e) {
            fn(e);
        });
    };
    /**
     * Deleted the polyline.
     *
     * @memberof BingPolyline
     */
    BingPolyline.prototype.Delete = function () {
        if (this._layer) {
            this._layer.remove(this.NativePrimitve);
        }
        else {
            this._map.entities.remove(this.NativePrimitve);
        }
        if (this._tooltip) {
            this._tooltip.Delete();
        }
    };
    /**
     * Gets whether the polyline is draggable.
     *
     * @returns {boolean} - True if the polyline is dragable, false otherwise.
     *
     * @memberof BingPolyline
     */
    BingPolyline.prototype.GetDraggable = function () {
        ///
        /// Bing polygons are not draggable by default.
        /// See https://social.msdn.microsoft.com/Forums/en-US/
        ///     7aaae748-4d5f-4be5-a7bb-90498e08b41c/how-can-i-make-polygonpolyline-draggable-in-bing-maps-8
        ///     ?forum=bingmaps
        /// for a possible approach to be implemented in the model.
        ///
        return false;
    };
    /**
     * Gets whether the polyline path can be edited.
     *
     * @returns {boolean} - True if the path can be edited, false otherwise.
     *
     * @memberof BingPolyline
     */
    BingPolyline.prototype.GetEditable = function () {
        return this._isEditable;
    };
    /**
     * Gets the polyline path.
     *
     * @returns {Array<ILatLong>} - Array of {@link ILatLong} objects describing the polyline path.
     *
     * @memberof BingPolyline
     */
    BingPolyline.prototype.GetPath = function () {
        var p = this._polyline.getLocations();
        var path = new Array();
        p.forEach(function (l) { return path.push({ latitude: l.latitude, longitude: l.longitude }); });
        return path;
    };
    /**
     * Gets whether the polyline is visible.
     *
     * @returns {boolean} - True if the polyline is visible, false otherwise.
     *
     * @memberof BingPolyline
     */
    BingPolyline.prototype.GetVisible = function () {
        return this._polyline.getVisible();
    };
    /**
     * Sets whether the polyline is dragable.
     *
     * @param {boolean} draggable - True to make the polyline dragable, false otherwise.
     *
     * @memberof BingPolyline
     */
    BingPolyline.prototype.SetDraggable = function (draggable) {
        ///
        /// Bing polygons are not draggable by default.
        /// See https://social.msdn.microsoft.com/Forums/en-US/
        ///     7aaae748-4d5f-4be5-a7bb-90498e08b41c/how-can-i-make-polygonpolyline-draggable-in-bing-maps-8
        ///     ?forum=bingmaps
        /// for a possible approach to be implemented in the model.
        ///
        throw (new Error('The bing maps implementation currently does not support draggable polylines.'));
    };
    /**
     * Sets wether the polyline path is editable.
     *
     * @param {boolean} editable - True to make polyline path editable, false otherwise.
     *
     * @memberof BingPolyline
     */
    BingPolyline.prototype.SetEditable = function (editable) {
        this._isEditable = editable;
    };
    /**
     * Sets the polyline options
     *
     * @param {IPolylineOptions} options - {@link ILatLong} object containing the options. The options are merged with hte ones
     * already on the underlying model.
     *
     * @memberof BingPolyline
     */
    BingPolyline.prototype.SetOptions = function (options) {
        var o = bing_conversions_1.BingConversions.TranslatePolylineOptions(options);
        this._polyline.setOptions(o);
        if (options.path) {
            this.SetPath(options.path);
        }
    };
    /**
     * Sets the polyline path.
     *
     * @param {Array<ILatLong>} path - An Array of {@link ILatLong} (or array of arrays) describing the polylines path.
     *
     * @memberof BingPolyline
     */
    BingPolyline.prototype.SetPath = function (path) {
        var p = new Array();
        path.forEach(function (x) { return p.push(new Microsoft.Maps.Location(x.latitude, x.longitude)); });
        this._polyline.setLocations(p);
    };
    /**
     * Sets whether the polyline is visible.
     *
     * @param {boolean} visible - True to set the polyline visible, false otherwise.
     *
     * @memberof BingPolyline
     */
    BingPolyline.prototype.SetVisible = function (visible) {
        this._polyline.setOptions({ visible: visible });
    };
    ///
    /// Private methods
    ///
    /**
     * Configures the tooltip for the polygon
     * @memberof Polygon
     * @private
     */
    BingPolyline.prototype.ManageTooltip = function () {
        var _this = this;
        if (this._showTooltip && this._title != null && this._title !== '') {
            var o = {
                text: this._title,
                align: 'left',
                offset: new Microsoft.Maps.Point(0, 25),
                backgroundColor: 'bisque',
                hidden: true
            };
            if (this._tooltip == null) {
                this._tooltip = new bing_label_1.BingMapLabel(o);
                this._tooltip.SetMap(this._map);
            }
            else {
                this._tooltip.SetValues(o);
            }
            if (!this._hasToolTipReceiver) {
                this._mouseOverListener = Microsoft.Maps.Events.addHandler(this._polyline, 'mouseover', function (e) {
                    _this._tooltip.Set('position', e.location);
                    if (!_this._tooltipVisible) {
                        _this._tooltip.Set('hidden', false);
                        _this._tooltipVisible = true;
                    }
                });
                this._mouseMoveListener = Microsoft.Maps.Events.addHandler(this._map, 'mousemove', function (e) {
                    if (_this._tooltipVisible && e.location && e.primitive === _this._polyline) {
                        _this._tooltip.Set('position', e.location);
                    }
                });
                this._mouseOutListener = Microsoft.Maps.Events.addHandler(this._polyline, 'mouseout', function (e) {
                    if (_this._tooltipVisible) {
                        _this._tooltip.Set('hidden', true);
                        _this._tooltipVisible = false;
                    }
                });
                this._hasToolTipReceiver = true;
            }
        }
        if ((!this._showTooltip || this._title === '' || this._title == null)) {
            if (this._hasToolTipReceiver) {
                if (this._mouseOutListener) {
                    Microsoft.Maps.Events.removeHandler(this._mouseOutListener);
                }
                if (this._mouseOverListener) {
                    Microsoft.Maps.Events.removeHandler(this._mouseOverListener);
                }
                if (this._mouseMoveListener) {
                    Microsoft.Maps.Events.removeHandler(this._mouseMoveListener);
                }
                this._hasToolTipReceiver = false;
            }
            if (this._tooltip) {
                this._tooltip.SetMap(null);
                this._tooltip = null;
            }
        }
    };
    return BingPolyline;
}());
exports.BingPolyline = BingPolyline;
//# sourceMappingURL=bing-polyline.js.map