"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var google_conversions_1 = require("../../services/google/google-conversions");
/**
 * Concrete implementation for a {@link InfoWindow}} model for Google Maps.
 *
 * @implements InfoWindow
 * @class GoogleInfoWindow
 * @export
 */
var GoogleInfoWindow = (function () {
    ///
    /// constructor
    ///
    /**
     * Creates an instance of GoogleInfoWindow.
     * @param {GoogleMapTypes.InfoWindow} _infoWindow - A {@link GoogleMapTypes.InfoWindow} instance underlying the model.
     * @param {GoogleMapService} _mapService - An instance of the {@link GoogleMapService}.
     * @memberof GoogleInfoWindow
     * @public
     * @constructor
     */
    function GoogleInfoWindow(_infoWindow, _mapService) {
        this._infoWindow = _infoWindow;
        this._mapService = _mapService;
    }
    Object.defineProperty(GoogleInfoWindow.prototype, "IsOpen", {
        /**
         * Gets whether the info box is currently open.
         *
         * @readonly
         * @type {boolean}
         * @memberof InfoWGoogleInfoWindowindow
         */
        get: function () {
            if (this._isOpen === true) {
                return true;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleInfoWindow.prototype, "NativePrimitve", {
        /**
         * Gets the underlying native object.
         *
         * @type {GoogleMapTypes.InfoWindow}
         * @property
         * @public
         * @readonly
         */
        get: function () {
            return this._infoWindow;
        },
        enumerable: true,
        configurable: true
    });
    ///
    /// Public methods
    ///
    /**
      * Adds an event listener to the InfoWindow.
      *
      * @param {string} eventType - String containing the event for which to register the listener (e.g. "click")
      * @param {Function} fn - Delegate invoked when the event occurs.
      *
      * @memberof GoogleInfoWindow
      * @method
      * @public
      */
    GoogleInfoWindow.prototype.AddListener = function (eventType, fn) {
        var _this = this;
        this._infoWindow.addListener(eventType, function (e) {
            if (eventType === 'closeclick') {
                _this._isOpen = false;
            }
            fn(e);
        });
    };
    /**
     *
     * Closes the info window.
     *
     * @memberof GoogleInfoWindow
     * @method
     * @public
     */
    GoogleInfoWindow.prototype.Close = function () {
        this._isOpen = false;
        this._infoWindow.close();
    };
    /**
     * Gets the position of the info window
     *
     * @returns {ILatLong} - The geo coordinates of the info window.
     *
     * @memberof GoogleInfoWindow
     * @method
     * @public
     */
    GoogleInfoWindow.prototype.GetPosition = function () {
        return google_conversions_1.GoogleConversions.TranslateLatLngObject(this._infoWindow.getPosition());
    };
    /**
     * Opens the info window
     *
     * @param {*} [anchor] - Optional Anchor.
     *
     * @memberof GoogleInfoWindow
     * @method
     * @public
     */
    GoogleInfoWindow.prototype.Open = function (anchor) {
        var _this = this;
        this._mapService.MapPromise.then(function (m) {
            _this._isOpen = true;
            _this._infoWindow.open(m, anchor);
        });
    };
    /**
     * Sets the info window options
     *
     * @param {IInfoWindowOptions} options - The options to set. This object will be merged with the existing options.
     *
     * @memberof GoogleInfoWindow
     * @method
     * @public
     */
    GoogleInfoWindow.prototype.SetOptions = function (options) {
        var o = google_conversions_1.GoogleConversions.TranslateInfoWindowOptions(options);
        this._infoWindow.setOptions(o);
    };
    ;
    /**
     * Sets the info window position
     *
     * @param {ILatLong} position - Geo coordinates at which to anchor the info window.
     *
     * @memberof GoogleInfoWindow
     * @method
     * @public
     */
    GoogleInfoWindow.prototype.SetPosition = function (position) {
        var l = google_conversions_1.GoogleConversions.TranslateLocation(position);
        this._infoWindow.setPosition(l);
    };
    ;
    return GoogleInfoWindow;
}());
exports.GoogleInfoWindow = GoogleInfoWindow;
//# sourceMappingURL=google-info-window.js.map