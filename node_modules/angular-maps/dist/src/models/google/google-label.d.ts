import * as GoogleMapTypes from '../../services/google/google-map-types';
import { MapLabel } from '../map-label';
/**
 * Implements map a labled to be placed on the map.
 *
 * @export
 * @extends MapLabel
 * @extends google.maps.OverlayView
 * @class GoogleMapLabel
 */
export declare class GoogleMapLabel extends MapLabel {
    /**
     * Creates a new MapLabel
     * @extends google.maps.OverlayView
     * @extends MapLabel
     * @param {{ [key: string]: any }} opt_options Optional properties to set.
     * @constructor
     * @public
     */
    constructor(options: {
        [key: string]: any;
    });
    /**
     * Gets the value of a setting.
     *
     * @param {string} key - Key specifying the setting.
     * @returns {*} - The value of the setting.
     * @memberof MapLabel
     * @public
     * @method
     */
    Get(key: string): any;
    /**
     * Gets the map associted with the label.
     *
     * @returns {GoogleMapTypes.GoogleMap}
     * @memberof GoogleMapLabel
     * @method
     * @public
     */
    GetMap(): GoogleMapTypes.GoogleMap;
    /**
     * Set the value for a setting.
     *
     * @param {string} key - Key specifying the setting.
     * @param {*} val - The value to set.
     * @memberof MapLabel
     * @public
     * @method
     */
    Set(key: string, val: any): void;
    /**
     * Sets the map for the label. Settings this to null remove the label from hte map.
     *
     * @param {GoogleMapTypes.GoogleMap} map - Map to associated with the label.
     * @memberof GoogleMapLabel
     * @method
     * @public
     */
    SetMap(map: GoogleMapTypes.GoogleMap): void;
    /**
     * Applies settings to the object
     *
     * @param {{ [key: string]: any }} options - An object containing the settings key value pairs.
     * @memberof MapLabel
     * @public
     * @method
     */
    SetValues(options: {
        [key: string]: any;
    }): void;
    /**
     * Draws the label on the map.
     * @memberof GoogleMapLabel
     * @method
     * @protected
     */
    protected Draw(): void;
    /**
     * Delegate called when the label is added to the map. Generates and configures
     * the canvas.
     *
     * @memberof GoogleMapLabel
     * @method
     * @protected
     */
    protected OnAdd(): void;
}
/**
 * Helper function to extend the OverlayView into the MapLabel
 *
 * @export
 * @method
 */
export declare function ExtendMapLabelWithOverlayView(): void;
