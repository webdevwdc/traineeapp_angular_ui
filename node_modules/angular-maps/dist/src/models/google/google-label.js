"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var map_label_1 = require("../map-label");
/**
 * Implements map a labled to be placed on the map.
 *
 * @export
 * @extends MapLabel
 * @extends google.maps.OverlayView
 * @class GoogleMapLabel
 */
var GoogleMapLabel = (function (_super) {
    __extends(GoogleMapLabel, _super);
    ///
    /// Constructor
    ///
    /**
     * Creates a new MapLabel
     * @extends google.maps.OverlayView
     * @extends MapLabel
     * @param {{ [key: string]: any }} opt_options Optional properties to set.
     * @constructor
     * @public
     */
    function GoogleMapLabel(options) {
        return _super.call(this, options) || this;
    }
    ///
    /// Public methods
    ///
    /**
     * Gets the value of a setting.
     *
     * @param {string} key - Key specifying the setting.
     * @returns {*} - The value of the setting.
     * @memberof MapLabel
     * @public
     * @method
     */
    GoogleMapLabel.prototype.Get = function (key) {
        return this.get(key);
    };
    /**
     * Gets the map associted with the label.
     *
     * @returns {GoogleMapTypes.GoogleMap}
     * @memberof GoogleMapLabel
     * @method
     * @public
     */
    GoogleMapLabel.prototype.GetMap = function () {
        return this.getMap();
    };
    /**
     * Set the value for a setting.
     *
     * @param {string} key - Key specifying the setting.
     * @param {*} val - The value to set.
     * @memberof MapLabel
     * @public
     * @method
     */
    GoogleMapLabel.prototype.Set = function (key, val) {
        if (this.Get(key) !== val) {
            this.set(key, val);
        }
    };
    /**
     * Sets the map for the label. Settings this to null remove the label from hte map.
     *
     * @param {GoogleMapTypes.GoogleMap} map - Map to associated with the label.
     * @memberof GoogleMapLabel
     * @method
     * @public
     */
    GoogleMapLabel.prototype.SetMap = function (map) {
        this.setMap(map);
    };
    /**
     * Applies settings to the object
     *
     * @param {{ [key: string]: any }} options - An object containing the settings key value pairs.
     * @memberof MapLabel
     * @public
     * @method
     */
    GoogleMapLabel.prototype.SetValues = function (options) {
        for (var key in options) {
            if (this.Get(key) === options[key]) {
                delete options[key];
            }
        }
        this.setValues(options);
    };
    ///
    /// Protected methods
    ///
    /**
     * Draws the label on the map.
     * @memberof GoogleMapLabel
     * @method
     * @protected
     */
    GoogleMapLabel.prototype.Draw = function () {
        var projection = this.getProjection();
        var visibility = this.GetVisible();
        if (!projection) {
            // The map projection is not ready yet so do nothing
            return;
        }
        if (!this._canvas) {
            // onAdd has not been called yet.
            return;
        }
        var style = this._canvas.style;
        if (visibility !== '') {
            // label is not visible, don't calculate positions etc.
            style['visibility'] = visibility;
            return;
        }
        var offset = this.Get('offset');
        var latLng = this.Get('position');
        if (!latLng) {
            return;
        }
        if (!(latLng instanceof google.maps.LatLng)) {
            latLng = new google.maps.LatLng(latLng.lat, latLng.lng);
        }
        if (!offset) {
            offset = new google.maps.Point(0, 0);
        }
        var pos = projection.fromLatLngToDivPixel(latLng);
        style['top'] = (pos.y + offset.y) + 'px';
        style['left'] = (pos.x + offset.x) + 'px';
        style['visibility'] = visibility;
    };
    ;
    /**
     * Delegate called when the label is added to the map. Generates and configures
     * the canvas.
     *
     * @memberof GoogleMapLabel
     * @method
     * @protected
     */
    GoogleMapLabel.prototype.OnAdd = function () {
        this._canvas = document.createElement('canvas');
        var style = this._canvas.style;
        style.position = 'absolute';
        var ctx = this._canvas.getContext('2d');
        ctx.lineJoin = 'round';
        ctx.textBaseline = 'top';
        this.DrawCanvas();
        var panes = this.getPanes();
        if (panes) {
            panes.overlayLayer.appendChild(this._canvas);
            // 4: floatPane (infowindow)
            // 3: overlayMouseTarget (mouse events)
            // 2: markerLayer (marker images)
            // 1: overlayLayer (polygons, polylines, ground overlays, tile layer overlays)
            // 0: mapPane (lowest pane above the map tiles)
        }
    };
    return GoogleMapLabel;
}(map_label_1.MapLabel));
exports.GoogleMapLabel = GoogleMapLabel;
/**
 * Helper function to extend the OverlayView into the MapLabel
 *
 * @export
 * @method
 */
function ExtendMapLabelWithOverlayView() {
    var x = GoogleMapLabel.prototype;
    GoogleMapLabel.prototype = new google.maps.OverlayView;
    for (var y in x) {
        if (x[y] != null) {
            GoogleMapLabel.prototype[y] = x[y];
        }
    }
    GoogleMapLabel.prototype['changed'] = x['Changed'];
    GoogleMapLabel.prototype['onAdd'] = x['OnAdd'];
    GoogleMapLabel.prototype['draw'] = x['Draw'];
    GoogleMapLabel.prototype['onRemove'] = x['OnRemove'];
}
exports.ExtendMapLabelWithOverlayView = ExtendMapLabelWithOverlayView;
//# sourceMappingURL=google-label.js.map