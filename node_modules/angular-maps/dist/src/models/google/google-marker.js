"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var google_conversions_1 = require("./../../services/google/google-conversions");
/**
 * Concrete implementation of the {@link Marker} contract for the Google Maps map architecture.
 *
 * @export
 * @class GoogleMarker
 * @implements {Marker}
 */
var GoogleMarker = (function () {
    ///
    /// Constructors
    ///
    /**
     * Creates an instance of GoogleMarker.
     * @param {GoogleMapTypes.Marker} _marker
     *
     * @memberof GoogleMarker
     */
    function GoogleMarker(_marker) {
        this._marker = _marker;
        ///
        /// Field declarations
        ///
        this._metadata = new Map();
        this._isFirst = false;
        this._isLast = true;
    }
    Object.defineProperty(GoogleMarker.prototype, "IsFirst", {
        ///
        /// Public properties
        ///
        /**
         * Indicates that the marker is the first marker in a set.
         *
         * @type {boolean}
         * @memberof Marker
         */
        get: function () { return this._isFirst; },
        set: function (val) { this._isFirst = val; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMarker.prototype, "IsLast", {
        /**
         * Indicates that the marker is the last marker in the set.
         *
         * @type {boolean}
         * @memberof Marker
         */
        get: function () { return this._isLast; },
        set: function (val) { this._isLast = val; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMarker.prototype, "Metadata", {
        /**
         * Gets the marker metadata.
         *
         * @readonly
         * @type {Map<string, any>}
         * @memberof BingMarker
         */
        get: function () { return this._metadata; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMarker.prototype, "NativePrimitve", {
        /**
         * Gets the native primitve implementing the marker, in this case {@link Microsoft.Maps.Pushpin}
         *
         * @readonly
         * @abstract
         * @type {*}
         * @memberof BingMarker
         */
        get: function () { return this._marker; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoogleMarker.prototype, "Location", {
        /**
         * Gets the Location of the marker
         *
         * @readonly
         * @abstract
         * @type {ILatLong}
         * @memberof BingMarker
         */
        get: function () {
            var l = this._marker.getPosition();
            return {
                latitude: l.lat(),
                longitude: l.lng()
            };
        },
        enumerable: true,
        configurable: true
    });
    ///
    /// Public methods
    ///
    /**
     * Adds an event listener to the marker.
     *
     * @param {string} eventType - String containing the event for which to register the listener (e.g. "click")
     * @param {Function} fn - Delegate invoked when the event occurs.
     *
     * @memberof GoogleMarker
     */
    GoogleMarker.prototype.AddListener = function (eventType, fn) {
        this._marker.addListener(eventType, fn);
    };
    /**
     * Deletes the marker.
     *
     *
     * @memberof GoogleMarker
     */
    GoogleMarker.prototype.DeleteMarker = function () {
        this._marker.setMap(null);
    };
    /**
     * Gets the marker label
     *
     * @returns {string}
     *
     * @memberof GoogleMarker
     */
    GoogleMarker.prototype.GetLabel = function () {
        return this._marker.getLabel().text;
    };
    /**
     * Gets whether the marker is visible.
     *
     * @returns {boolean} - True if the marker is visible, false otherwise.
     *
     * @memberof GoogleMarker
     */
    GoogleMarker.prototype.GetVisible = function () {
        return this._marker.getVisible();
    };
    /**
     * Sets the anchor for the marker. Use this to adjust the root location for the marker to accomodate various marker image sizes.
     *
     * @param {IPoint} anchor - Point coordinates for the marker anchor.
     *
     * @memberof GoogleMarker
     */
    GoogleMarker.prototype.SetAnchor = function (anchor) {
        // not implemented
        // TODO: we need to switch the model to complex icons for google to
        // support anchors, sizes and origins.
        // https://developers.google.com/maps/documentation/javascript/markers
    };
    /**
     * Sets the draggability of a marker.
     *
     * @param {boolean} draggable - True to mark the marker as draggable, false otherwise.
     *
     * @memberof GoogleMarker
     */
    GoogleMarker.prototype.SetDraggable = function (draggable) {
        this._marker.setDraggable(draggable);
    };
    /**
     * Sets the icon for the marker.
     *
     * @param {string} icon - String containing the icon in various forms (url, data url, etc.)
     *
     * @memberof GoogleMarker
     */
    GoogleMarker.prototype.SetIcon = function (icon) {
        this._marker.setIcon(icon);
    };
    /**
     * Sets the marker label.
     *
     * @param {string} label - String containing the label to set.
     *
     * @memberof GoogleMarker
     */
    GoogleMarker.prototype.SetLabel = function (label) {
        this._marker.setLabel(label);
    };
    /**
     * Sets the marker position.
     *
     * @param {ILatLong} latLng - Geo coordinates to set the marker position to.
     *
     * @memberof GoogleMarker
     */
    GoogleMarker.prototype.SetPosition = function (latLng) {
        var p = google_conversions_1.GoogleConversions.TranslateLocationObject(latLng);
        this._marker.setPosition(p);
    };
    /**
     * Sets the marker title.
     *
     * @param {string} title - String containing the title to set.
     *
     * @memberof GoogleMarker
     */
    GoogleMarker.prototype.SetTitle = function (title) {
        this._marker.setTitle(title);
    };
    /**
     * Sets the marker options.
     *
     * @param {IMarkerOptions} options - {@link IMarkerOptions} object containing the marker options to set. The supplied options are
     * merged with the underlying marker options.
     *
     * @memberof GoogleMarker
     */
    GoogleMarker.prototype.SetOptions = function (options) {
        var o = google_conversions_1.GoogleConversions.TranslateMarkerOptions(options);
        this._marker.setOptions(o);
    };
    /**
     * Sets whether the marker is visible.
     *
     * @param {boolean} visible - True to set the marker visible, false otherwise.
     *
     * @memberof GoogleMarker
     */
    GoogleMarker.prototype.SetVisible = function (visible) {
        this._marker.setVisible(visible);
    };
    return GoogleMarker;
}());
exports.GoogleMarker = GoogleMarker;
//# sourceMappingURL=google-marker.js.map