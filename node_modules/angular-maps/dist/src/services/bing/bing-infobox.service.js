"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Observable_1 = require("rxjs/Observable");
var map_service_1 = require("./../../services/map.service");
var bing_events_lookup_1 = require("./../../models/bing/bing-events-lookup");
/**
 * Concrete implementation of the {@link InfoBoxService} contract for the Bing Maps V8 architecture.
 *
 * @export
 * @class BingInfoBoxService
 * @implements {InfoBoxService}
 */
var BingInfoBoxService = (function () {
    ///
    /// Constructor
    ///
    /**
     * Creates an instance of BingInfoBoxService.
     * @param {MapService} _mapService - Concrete {@link MapService} implementation for Bing Maps V8. An instance of {@link BingMapService}.
     * @param {NgZone} _zone - An instance of NgZone to provide zone aware promises.
     *
     * @memberof BingInfoBoxService
     */
    function BingInfoBoxService(_mapService, _zone) {
        this._mapService = _mapService;
        this._zone = _zone;
        ///
        /// Field declarations
        ///
        this._boxes = new Map();
    }
    /**
     * Adds an info window to the map or layer.
     *
     * @param {InfoBoxComponent} info - {@link InfoBoxComponent} component object representing the infobox.
     *
     * @memberof BingInfoBoxService
     */
    BingInfoBoxService.prototype.AddInfoWindow = function (info) {
        var options = {};
        if (typeof info.Latitude === 'number' && typeof info.Longitude === 'number') {
            options.position = {
                latitude: info.Latitude,
                longitude: info.Longitude
            };
        }
        if (typeof info.InfoWindowActions !== 'undefined' && info.InfoWindowActions.length > 0) {
            options.actions = [];
            info.InfoWindowActions.forEach(function (action) {
                options.actions.push({
                    label: action.Label,
                    eventHandler: function () { action.ActionClicked.emit(null); }
                });
            });
        }
        if (info.HtmlContent !== '') {
            options.htmlContent = info.HtmlContent;
        }
        else {
            options.title = info.Title;
            options.description = info.Description;
        }
        if (info.xOffset || info.yOffset) {
            if (options.pixelOffset == null) {
                options.pixelOffset = { x: 0, y: 0 };
            }
            if (info.xOffset) {
                options.pixelOffset.x = info.xOffset;
            }
            if (info.yOffset) {
                options.pixelOffset.y = info.yOffset;
            }
        }
        options.visible = info.Visible;
        var infoPromise = this._mapService.CreateInfoWindow(options);
        this._boxes.set(info, infoPromise);
    };
    /**
     * Closes an InfoBoxComponent that is open.
     *
     * @abstract
     * @param {InfoBoxComponent} info - {@link InfoBoxComponent} component object representing the infobox.
     * @returns {Promise<void>} - A promise that is fullfilled when the infobox has been closed.
     *
     * @memberof InfoBoxService
     */
    BingInfoBoxService.prototype.Close = function (info) {
        return this._boxes.get(info).then(function (w) { return w.Close(); });
    };
    /**
     * Registers an event delegate for an info window.
     *
     * @template T - Type of the event to emit.
     * @param {string} eventName - The name of the event to register (e.g. 'click')
     * @param {InfoBoxComponent} infoComponent - The {@link InfoBoxComponent} for which to register the event.
     * @returns {Observable<T>} - Observable emiting an instance of T each time the event occurs.
     *
     * @memberof GoogleInfoBoxService
     */
    BingInfoBoxService.prototype.CreateEventObservable = function (eventName, infoComponent) {
        var _this = this;
        var eventNameTranslated = bing_events_lookup_1.BingMapEventsLookup[eventName];
        return Observable_1.Observable.create(function (observer) {
            _this._boxes.get(infoComponent).then(function (b) {
                b.AddListener(eventNameTranslated, function (e) { return _this._zone.run(function () { return observer.next(e); }); });
            });
        });
    };
    /**
     * Deletes an infobox.
     *
     * @abstract
     * @param {InfoBoxComponent} info - {@link InfoBoxComponent} component object representing the infobox.
     * @returns {Promise<void>} - A promise that is fullfilled when the infobox has been deleted.
     *
     * @memberof InfoBoxService
     */
    BingInfoBoxService.prototype.DeleteInfoWindow = function (info) {
        var _this = this;
        var w = this._boxes.get(info);
        if (w == null) {
            return Promise.resolve();
        }
        return w.then(function (i) {
            return _this._zone.run(function () {
                i.Close();
                _this._boxes.delete(info);
            });
        });
    };
    /**
     * Opens an infobox that is closed.
     *
     * @abstract
     * @param {InfoBoxComponent} info - {@link InfoBoxComponent} component object representing the infobox.
     * @returns {Promise<void>} - A promise that is fullfilled when the infobox has been opened.
     *
     * @memberof InfoBoxService
     */
    BingInfoBoxService.prototype.Open = function (info, loc) {
        if (info.CloseInfoBoxesOnOpen || info.Modal) {
            // close all open info boxes.
            this._boxes.forEach(function (v, i) {
                if (info.Id !== i.Id) {
                    v.then(function (w) {
                        if (w.IsOpen) {
                            w.Close();
                            i.Close();
                        }
                    });
                }
            });
        }
        return this._boxes.get(info).then(function (w) {
            if (info.Latitude && info.Longitude) {
                w.SetPosition({ latitude: info.Latitude, longitude: info.Longitude });
            }
            else if (loc) {
                ///
                /// this situation is specifically used for cluster layers that use spidering.
                ///
                w.SetPosition(loc);
            }
            else if (info.HostMarker) {
                w.SetPosition({ latitude: info.HostMarker.Latitude, longitude: info.HostMarker.Longitude });
            }
            w.Open();
        });
    };
    /**
     * Sets the infobox options.
     *
     * @abstract
     * @param {InfoBoxComponent} info - {@link InfoBoxComponent} component object representing the infobox.
     * @param {IInfoWindowOptions} options - {@link IInfoWindowOptions} object containing the options to set. Options provided are
     * merged with the existing options of the underlying infobox.
     * @returns {Promise<void>} - A promise that is fullfilled when the infobox options have been updated.
     *
     * @memberof InfoBoxService
     */
    BingInfoBoxService.prototype.SetOptions = function (info, options) {
        return this._boxes.get(info).then(function (i) { return i.SetOptions(options); });
    };
    /**
     * Set the position of the infobox based on the properties set on the InfoBox component.
     *
     * @abstract
     * @param {InfoBoxComponent} info - {@link InfoBoxComponent} component object representing the infobox.
     * @returns {Promise<void>} - A promise that is fullfilled when the infobox position has been updated.
     *
     * @memberof InfoBoxService
     */
    BingInfoBoxService.prototype.SetPosition = function (info) {
        return this._boxes.get(info).then(function (i) { return i.SetPosition({
            latitude: info.Latitude,
            longitude: info.Longitude
        }); });
    };
    return BingInfoBoxService;
}());
BingInfoBoxService.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
BingInfoBoxService.ctorParameters = function () { return [
    { type: map_service_1.MapService, },
    { type: core_1.NgZone, },
]; };
exports.BingInfoBoxService = BingInfoBoxService;
//# sourceMappingURL=bing-infobox.service.js.map