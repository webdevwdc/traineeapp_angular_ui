"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var marker_1 = require("./../../models/marker");
var bing_marker_1 = require("./../../models/bing/bing-marker");
var marker_type_id_1 = require("./../../models/marker-type-id");
var bing_conversions_1 = require("./bing-conversions");
/**
 * This abstract partially implements the contract for the {@link LayerService}
 * and {@link ClusterService} for the Bing Maps V8 archtiecture. It serves
 * as the base class for basic layer ({@link BingLayerService}) and cluster layer ({@link BingClusterLayer}).
 *
 * @export
 * @abstract
 * @class BingLayerBase
 */
var BingLayerBase = (function () {
    ///
    /// Constructor
    ///
    /**
     * Creates an instance of BingLayerBase.
     * @param {MapService} _mapService - Concrete {@link MapService} implementation for Bing Maps V8. An instance of {@link BingMapService}.
     *
     * @memberof BingLayerBase
     */
    function BingLayerBase(_mapService) {
        this._mapService = _mapService;
    }
    /**
     * Creates a marker in the layer.
     *
     * @param {number} layer - The Id of the layer in which to create the marker.
     * @param {IMarkerOptions} options - {@link IMarkerOptions} object containing the marker properties.
     * @returns {Promise<Marker>} - A promise that when fullfilled contains the {@link Marker} model for the created marker.
     *
     * @memberof BingLayerBase
     */
    BingLayerBase.prototype.CreateMarker = function (layer, options) {
        var p = this.GetLayerById(layer);
        if (p == null) {
            throw (new Error("Layer with id " + layer + " not found in Layer Map"));
        }
        return p.then(function (l) {
            var loc = bing_conversions_1.BingConversions.TranslateLocation(options.position);
            return bing_conversions_1.BingConversions.TranslateMarkerOptions(options).then(function (o) {
                if (o.icon == null) {
                    var s = 48;
                    var iconInfo = {
                        markerType: marker_type_id_1.MarkerTypeId.CanvasMarker,
                        rotation: 45,
                        drawingOffset: { x: 24, y: 0 },
                        points: [
                            { x: 10, y: 40 },
                            { x: 24, y: 30 },
                            { x: 38, y: 40 },
                            { x: 24, y: 0 }
                        ],
                        color: '#f00',
                        size: { width: s, height: s }
                    };
                    o.icon = marker_1.Marker.CreateMarker(iconInfo);
                    // cast to string here because we know that canvas marker will always produce string
                    // result, never promise...
                    o.anchor = new Microsoft.Maps.Point(iconInfo.size.width * 0.75, iconInfo.size.height * 0.25);
                    o.textOffset = new Microsoft.Maps.Point(0, iconInfo.size.height * 0.66);
                }
                var pushpin = new Microsoft.Maps.Pushpin(loc, o);
                var marker = new bing_marker_1.BingMarker(pushpin);
                marker.IsFirst = options.isFirst;
                marker.IsLast = options.isLast;
                if (options.metadata) {
                    options.metadata.forEach(function (v, k) { return marker.Metadata.set(k, v); });
                }
                l.AddEntity(marker);
                return marker;
            });
        });
    };
    ///
    /// Protected methods
    ///
    /**
     * Gets the layer based on its id.
     *
     * @protected
     * @param {number} id - Layer Id.
     * @returns {Promise<Layer>}  - A promise that when fullfilled contains the {@link Layer} model for the layer.
     *
     * @memberof BingLayerBase
     */
    BingLayerBase.prototype.GetLayerById = function (id) {
        var p;
        this._layers.forEach(function (l, k) { if (k.Id === id) {
            p = l;
        } });
        return p;
    };
    return BingLayerBase;
}());
exports.BingLayerBase = BingLayerBase;
//# sourceMappingURL=bing-layer-base.js.map