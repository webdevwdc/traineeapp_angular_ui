"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var mapapiloader_1 = require("./../mapapiloader");
/**
 * Protocol enumeration
 *
 * @export
 * @enum {number}
 */
var ScriptProtocol;
(function (ScriptProtocol) {
    ScriptProtocol[ScriptProtocol["HTTP"] = 0] = "HTTP";
    ScriptProtocol[ScriptProtocol["HTTPS"] = 1] = "HTTPS";
    ScriptProtocol[ScriptProtocol["AUTO"] = 2] = "AUTO";
})(ScriptProtocol = exports.ScriptProtocol || (exports.ScriptProtocol = {}));
/**
 * Bing Maps V8 specific loader configuration to be used with the {@link BingMapAPILoader}
 *
 * @export
 * @class BingMapAPILoaderConfig
 */
var BingMapAPILoaderConfig = (function () {
    function BingMapAPILoaderConfig() {
        ///
        /// API key for bing maps
        ///
        this.apiKey = '';
        ///
        /// Host and Path used for the `<script>` tag.
        ///
        this.hostAndPath = 'www.bing.com/api/maps/mapcontrol';
        ///
        /// Protocol used for the `<script>` tag.
        ///
        this.protocol = ScriptProtocol.HTTPS;
        ///
        /// The branch to be used. Leave empty for production. Use experimental
        ///
        this.branch = '';
    }
    return BingMapAPILoaderConfig;
}());
BingMapAPILoaderConfig.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
BingMapAPILoaderConfig.ctorParameters = function () { return []; };
exports.BingMapAPILoaderConfig = BingMapAPILoaderConfig;
/**
 * Default loader configuration.
 */
var DEFAULT_CONFIGURATION = new BingMapAPILoaderConfig();
/**
 * Bing Maps V8 implementation for the {@link MapAPILoader} service.
 *
 * @export
 * @class BingMapAPILoader
 * @extends {MapAPILoader}
 */
var BingMapAPILoader = (function (_super) {
    __extends(BingMapAPILoader, _super);
    /**
     * Creates an instance of BingMapAPILoader.
     * @param {BingMapAPILoaderConfig} _config  - The loader configuration.
     * @param {WindowRef} _windowRef - An instance of {@link WindowRef}. Necessary because Bing Map V8 interacts with the window object.
     * @param {DocumentRef} _documentRef - An instance of {@link DocumentRef}.
     * Necessary because Bing Map V8 interacts with the document object.
     *
     * @memberof BingMapAPILoader
     */
    function BingMapAPILoader(_config, _windowRef, _documentRef) {
        var _this = _super.call(this) || this;
        _this._config = _config;
        _this._windowRef = _windowRef;
        _this._documentRef = _documentRef;
        if (_this._config === null || _this._config === undefined) {
            _this._config = DEFAULT_CONFIGURATION;
        }
        return _this;
    }
    Object.defineProperty(BingMapAPILoader.prototype, "Config", {
        ///
        /// Property declarations.
        ///
        /**
         * Gets the loader configuration.
         *
         * @readonly
         * @type {BingMapAPILoaderConfig}
         * @memberof BingMapAPILoader
         */
        get: function () { return this._config; },
        enumerable: true,
        configurable: true
    });
    ///
    /// Public methods and MapAPILoader implementation.
    ///
    /**
     * Loads the necessary resources for Bing Maps V8.
     *
     * @returns {Promise<void>}
     *
     * @memberof BingMapAPILoader
     */
    BingMapAPILoader.prototype.Load = function () {
        var _this = this;
        if (this._scriptLoadingPromise) {
            return this._scriptLoadingPromise;
        }
        var script = this._documentRef.GetNativeDocument().createElement('script');
        script.type = 'text/javascript';
        script.async = true;
        script.defer = true;
        var callbackName = "angular2bingmaps" + new Date().getMilliseconds();
        script.src = this.GetScriptSrc(callbackName);
        this._scriptLoadingPromise = new Promise(function (resolve, reject) {
            _this._windowRef.GetNativeWindow()[callbackName] = function () {
                resolve();
            };
            script.onerror = function (error) { reject(error); };
        });
        this._documentRef.GetNativeDocument().head.appendChild(script);
        return this._scriptLoadingPromise;
    };
    ///
    /// Private methods
    ///
    /**
     * Gets the Bing Map V8 scripts url for injections into the header.
     *
     * @private
     * @param {string} callbackName - Name of the function to be called when the Bing Maps V8 scripts are loaded.
     * @returns {string} - The url to be used to load the Bing Map scripts.
     *
     * @memberof BingMapAPILoader
     */
    BingMapAPILoader.prototype.GetScriptSrc = function (callbackName) {
        var protocolType = (this._config && this._config.protocol) || DEFAULT_CONFIGURATION.protocol;
        var protocol;
        switch (protocolType) {
            case ScriptProtocol.AUTO:
                protocol = '';
                break;
            case ScriptProtocol.HTTP:
                protocol = 'http:';
                break;
            case ScriptProtocol.HTTPS:
                protocol = 'https:';
                break;
        }
        var hostAndPath = this._config.hostAndPath || DEFAULT_CONFIGURATION.hostAndPath;
        var queryParams = {
            callback: callbackName
        };
        if (this._config.branch !== '') {
            queryParams['branch'] = this._config.branch;
        }
        var params = Object.keys(queryParams)
            .map(function (k, i) {
            var param = (i === 0) ? '?' : '&';
            return param += k + "=" + queryParams[k];
        })
            .join('');
        return protocol + "//" + hostAndPath + params;
    };
    return BingMapAPILoader;
}(mapapiloader_1.MapAPILoader));
BingMapAPILoader.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
BingMapAPILoader.ctorParameters = function () { return [
    { type: BingMapAPILoaderConfig, decorators: [{ type: core_1.Optional },] },
    { type: mapapiloader_1.WindowRef, },
    { type: mapapiloader_1.DocumentRef, },
]; };
exports.BingMapAPILoader = BingMapAPILoader;
//# sourceMappingURL=bing-map.api-loader.service.js.map