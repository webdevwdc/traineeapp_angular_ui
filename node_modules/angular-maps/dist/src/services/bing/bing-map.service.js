"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Observable_1 = require("rxjs/Observable");
var mapapiloader_1 = require("./../mapapiloader");
var bing_conversions_1 = require("./bing-conversions");
var marker_1 = require("./../../models/marker");
var marker_type_id_1 = require("./../../models/marker-type-id");
var bing_marker_1 = require("./../../models/bing/bing-marker");
var bing_layer_1 = require("./../../models/bing/bing-layer");
var bing_cluster_layer_1 = require("./../../models/bing/bing-cluster-layer");
var bing_info_window_1 = require("./../../models/bing/bing-info-window");
var bing_polygon_1 = require("./../../models/bing/bing-polygon");
var bing_polyline_1 = require("./../../models/bing/bing-polyline");
var bing_label_1 = require("./../../models/bing/bing-label");
var bing_events_lookup_1 = require("../../models/bing/bing-events-lookup");
/**
 * Concrete implementation of the MapService abstract implementing a Bin Map V8 provider
 *
 * @export
 * @class BingMapService
 * @implements {MapService}
 */
var BingMapService = (function () {
    ///
    /// Constructor
    ///
    /**
     * Creates an instance of BingMapService.
     * @param {MapAPILoader} _loader MapAPILoader instance implemented for Bing Maps. This instance will generally be injected.
     * @param {NgZone} _zone NgZone object to enable zone aware promises. This will generally be injected.
     *
     * @memberof BingMapService
     */
    function BingMapService(_loader, _zone) {
        var _this = this;
        this._loader = _loader;
        this._zone = _zone;
        this._map = new Promise(function (resolve) { _this._mapResolver = resolve; });
        this._config = this._loader.Config;
    }
    Object.defineProperty(BingMapService.prototype, "MapInstance", {
        ///
        /// Property Definitions
        ///
        /**
         * Gets the Bing Map control instance underlying the implementation
         *
         * @readonly
         * @type {Microsoft.Maps.Map}
         * @memberof BingMapService
         */
        get: function () { return this._mapInstance; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BingMapService.prototype, "MapPromise", {
        /**
         * Gets a Promise for a Bing Map control instance underlying the implementation. Use this instead of {@link MapInstance} if you
         * are not sure if and when the instance will be created.
         * @readonly
         * @type {Promise<Microsoft.Maps.Map>}
         * @memberof BingMapService
         */
        get: function () { return this._map; },
        enumerable: true,
        configurable: true
    });
    ///
    /// Public methods and MapService interface implementation
    ///
    /**
     * Creates a Bing map cluster layer within the map context
     *
     * @param {IClusterOptions} options - Options for the layer. See {@link IClusterOptions}.
     * @returns {Promise<Layer>} - Promise of a {@link Layer} object, which models the underlying Microsoft.Maps.ClusterLayer object.
     *
     * @memberof BingMapService
     */
    BingMapService.prototype.CreateClusterLayer = function (options) {
        var _this = this;
        return this._map.then(function (map) {
            var p = new Promise(function (resolve) {
                Microsoft.Maps.loadModule('Microsoft.Maps.Clustering', function () {
                    var o = bing_conversions_1.BingConversions.TranslateClusterOptions(options);
                    var layer = new Microsoft.Maps.ClusterLayer(new Array(), o);
                    var bl;
                    map.layers.insert(layer);
                    bl = new bing_cluster_layer_1.BingClusterLayer(layer, _this);
                    bl.SetOptions(options);
                    resolve(bl);
                });
            });
            return p;
        });
    };
    /**
     * Creates an information window for a map position
     *
     * @param {IInfoWindowOptions} [options] - Infowindow options. See {@link IInfoWindowOptions}
     * @returns {Promise<InfoWindow>} - Promise of a {@link InfoWindow} object, which models the underlying Microsoft.Maps.Infobox object.
     *
     * @memberof BingMapService
     */
    BingMapService.prototype.CreateInfoWindow = function (options) {
        return this._map.then(function (map) {
            var loc;
            if (options.position == null) {
                loc = map.getCenter();
            }
            else {
                loc = new Microsoft.Maps.Location(options.position.latitude, options.position.longitude);
            }
            var infoBox = new Microsoft.Maps.Infobox(loc, bing_conversions_1.BingConversions.TranslateInfoBoxOptions(options));
            infoBox.setMap(map);
            return new bing_info_window_1.BingInfoWindow(infoBox);
        });
    };
    /**
     * Creates a map layer within the map context
     *
     * @param {ILayerOptions} options - Options for the layer. See {@link ILayerOptions}
     * @returns {Promise<Layer>} - Promise of a {@link Layer} object, which models the underlying Microsoft.Maps.Layer object.
     *
     * @memberof BingMapService
     */
    BingMapService.prototype.CreateLayer = function (options) {
        var _this = this;
        return this._map.then(function (map) {
            var layer = new Microsoft.Maps.Layer(options.id.toString());
            map.layers.insert(layer);
            return new bing_layer_1.BingLayer(layer, _this);
        });
    };
    /**
     * Creates a map instance
     *
     * @param {HTMLElement} el - HTML element to host the map.
     * @param {IMapOptions} mapOptions - Map options
     * @returns {Promise<void>} - Promise fullfilled once the map has been created.
     *
     * @memberof BingMapService
     */
    BingMapService.prototype.CreateMap = function (el, mapOptions) {
        var _this = this;
        return this._loader.Load().then(function () {
            bing_label_1.ExtendMapLabelWithOverlayView();
            if (_this._mapInstance != null) {
                _this.DisposeMap();
            }
            var o = bing_conversions_1.BingConversions.TranslateLoadOptions(mapOptions);
            if (!o.credentials) {
                o.credentials = _this._config.apiKey;
            }
            var map = new Microsoft.Maps.Map(el, o);
            _this._mapInstance = map;
            _this._mapResolver(map);
            return;
        });
    };
    /**
     * Creates a Bing map marker within the map context
     *
     * @param {IMarkerOptions} [options=<IMarkerOptions>{}] - Options for the marker. See {@link IMarkerOptions}.
     * @returns {Promise<Marker>} - Promise of a {@link Marker} object, which models the underlying Microsoft.Maps.PushPin object.
     *
     * @memberof BingMapService
     */
    BingMapService.prototype.CreateMarker = function (options) {
        if (options === void 0) { options = {}; }
        return this._map.then(function (map) {
            var loc = bing_conversions_1.BingConversions.TranslateLocation(options.position);
            return bing_conversions_1.BingConversions.TranslateMarkerOptions(options).then(function (o) {
                if (o.icon == null) {
                    var s = 48;
                    var iconInfo = {
                        markerType: marker_type_id_1.MarkerTypeId.CanvasMarker,
                        rotation: 45,
                        drawingOffset: { x: 24, y: 0 },
                        points: [
                            { x: 10, y: 40 },
                            { x: 24, y: 30 },
                            { x: 38, y: 40 },
                            { x: 24, y: 0 }
                        ],
                        color: '#f00',
                        size: { width: s, height: s }
                    };
                    o.icon = marker_1.Marker.CreateMarker(iconInfo);
                    // cast to string here because we know that canvas marker will always produce string
                    // result, never promise...
                    o.anchor = new Microsoft.Maps.Point(iconInfo.size.width * 0.75, iconInfo.size.height * 0.25);
                    o.textOffset = new Microsoft.Maps.Point(0, iconInfo.size.height * 0.66);
                }
                var pushpin = new Microsoft.Maps.Pushpin(loc, o);
                map.entities.push(pushpin);
                return new bing_marker_1.BingMarker(pushpin);
            });
        });
    };
    /**
     * Creates a polygon within the Bing Maps V8 map context
     *
     * @abstract
     * @param {IPolygonOptions} options - Options for the polygon. See {@link IPolygonOptions}.
     * @returns {Promise<Polygon>} - Promise of a {@link Polygon} object, which models the underlying native polygon.
     *
     * @memberof MapService
     */
    BingMapService.prototype.CreatePolygon = function (options) {
        return this._map.then(function (map) {
            var locs = bing_conversions_1.BingConversions.TranslatePaths(options.paths);
            var o = bing_conversions_1.BingConversions.TranslatePolygonOptions(options);
            var poly = new Microsoft.Maps.Polygon(locs, o);
            map.entities.push(poly);
            var p = new bing_polygon_1.BingPolygon(poly, map, null);
            if (options.title && options.title !== '') {
                p.Title = options.title;
            }
            if (options.showLabel != null) {
                p.ShowLabel = options.showLabel;
            }
            if (options.showTooltip != null) {
                p.ShowTooltip = options.showTooltip;
            }
            if (options.labelMaxZoom != null) {
                p.LabelMaxZoom = options.labelMaxZoom;
            }
            if (options.labelMinZoom != null) {
                p.LabelMinZoom = options.labelMinZoom;
            }
            return p;
        });
    };
    /**
     * Creates a polyline within the Bing Maps V8 map context
     *
     * @abstract
     * @param {IPolylinenOptions} options - Options for the polyline. See {@link IPolylineOptions}.
     * @returns {Promise<Polyline>} - Promise of a {@link Polyline} object (or an array thereof for complex paths),
     * which models the underlying native polygon.
     *
     * @memberof MapService
     */
    BingMapService.prototype.CreatePolyline = function (options) {
        var polyline;
        return this._map.then(function (map) {
            var o = bing_conversions_1.BingConversions.TranslatePolylineOptions(options);
            var locs = bing_conversions_1.BingConversions.TranslatePaths(options.path);
            if (options.path && options.path.length > 0 && !Array.isArray(options.path[0])) {
                polyline = new Microsoft.Maps.Polyline(locs[0], o);
                map.entities.push(polyline);
                var pl = new bing_polyline_1.BingPolyline(polyline, map, null);
                if (options.title && options.title !== '') {
                    pl.Title = options.title;
                }
                if (options.showTooltip != null) {
                    pl.ShowTooltip = options.showTooltip;
                }
                return pl;
            }
            else {
                var lines_1 = new Array();
                locs.forEach(function (p) {
                    polyline = new Microsoft.Maps.Polyline(p, o);
                    map.entities.push(polyline);
                    var pl = new bing_polyline_1.BingPolyline(polyline, map, null);
                    if (options.title && options.title !== '') {
                        pl.Title = options.title;
                    }
                    if (options.showTooltip != null) {
                        pl.ShowTooltip = options.showTooltip;
                    }
                    lines_1.push(pl);
                });
                return lines_1;
            }
        });
    };
    /**
     * Deletes a layer from the map.
     *
     * @param {Layer} layer - Layer to delete. See {@link Layer}. This method expects the Bing specific Layer model implementation.
     * @returns {Promise<void>} - Promise fullfilled when the layer has been removed.
     *
     * @memberof BingMapService
     */
    BingMapService.prototype.DeleteLayer = function (layer) {
        return this._map.then(function (map) {
            map.layers.remove(layer.NativePrimitve);
        });
    };
    /**
     * Dispaose the map and associated resoures.
     *
     * @returns {void}
     *
     * @memberof BingMapService
     */
    BingMapService.prototype.DisposeMap = function () {
        var _this = this;
        if (this._map == null && this._mapInstance == null) {
            return;
        }
        if (this._mapInstance != null) {
            this._mapInstance.dispose();
            this._mapInstance = null;
            this._map = new Promise(function (resolve) { _this._mapResolver = resolve; });
        }
    };
    /**
     * Gets the geo coordinates of the map center
     *
     * @returns {Promise<ILatLong>} - A promise that when fullfilled contains the goe location of the center. See {@link ILatLong}.
     *
     * @memberof BingMapService
     */
    BingMapService.prototype.GetCenter = function () {
        return this._map.then(function (map) {
            var center = map.getCenter();
            return {
                latitude: center.latitude,
                longitude: center.longitude
            };
        });
    };
    /**
     * Gets the geo coordinates of the map bounding box
     *
     * @returns {Promise<IBox>} - A promise that when fullfilled contains the goe location of the bounding box. See {@link IBox}.
     *
     * @memberof BingMapService
     */
    BingMapService.prototype.GetBounds = function () {
        return this._map.then(function (map) {
            var box = map.getBounds();
            var halfWidth = (box.width / 2);
            var halfHeight = (box.height / 2);
            return {
                maxLatitude: box.center.latitude + halfWidth > 180 ?
                    box.center.latitude - halfWidth : box.center.latitude + halfWidth,
                maxLongitude: box.center.longitude + halfHeight > 90 ?
                    box.center.longitude - halfHeight : box.center.longitude + halfHeight,
                minLatitude: box.center.latitude - halfWidth < -180 ?
                    box.center.latitude + halfWidth : box.center.latitude - halfWidth,
                minLongitude: box.center.longitude - halfHeight < -90 ?
                    box.center.longitude + halfHeight : box.center.longitude - halfHeight,
                center: { latitude: box.center.latitude, longitude: box.center.longitude },
                padding: 0
            };
        });
    };
    /**
     * Gets the current zoom level of the map.
     *
     * @returns {Promise<number>} - A promise that when fullfilled contains the zoom level.
     *
     * @memberof BingMapService
     */
    BingMapService.prototype.GetZoom = function () {
        return this._map.then(function (map) { return map.getZoom(); });
    };
    /**
     * Provides a conversion of geo coordinates to pixels on the map control.
     *
     * @param {ILatLong} loc - The geo coordinates to translate.
     * @returns {Promise<IPoint>} - Promise of an {@link IPoint} interface representing the pixels. This promise resolves to null
     * if the goe coordinates are not in the view port.
     *
     * @memberof BingMapService
     */
    BingMapService.prototype.LocationToPoint = function (loc) {
        return this._map.then(function (m) {
            var l = bing_conversions_1.BingConversions.TranslateLocation(loc);
            var p = m.tryLocationToPixel(l, Microsoft.Maps.PixelReference.control);
            if (p != null) {
                return { x: p.x, y: p.y };
            }
            return null;
        });
    };
    /**
     * Centers the map on a geo location.
     *
     * @param {ILatLong} latLng - GeoCoordinates around which to center the map. See {@link ILatLong}
     * @returns {Promise<void>} - Promise that is fullfilled when the center operations has been completed.
     *
     * @memberof BingMapService
     */
    BingMapService.prototype.SetCenter = function (latLng) {
        return this._map.then(function (map) { return map.setView({
            center: bing_conversions_1.BingConversions.TranslateLocation(latLng)
        }); });
    };
    /**
     * Sets the generic map options.
     *
     * @param {IMapOptions} options - Options to set.
     *
     * @memberof BingMapService
     */
    BingMapService.prototype.SetMapOptions = function (options) {
        this._map.then(function (m) {
            var o = bing_conversions_1.BingConversions.TranslateOptions(options);
            m.setOptions(o);
        });
    };
    /**
     * Sets the view options of the map.
     *
     * @param {IMapOptions} options - Options to set.
     *
     * @memberof BingMapService
     */
    BingMapService.prototype.SetViewOptions = function (options) {
        this._map.then(function (m) {
            var o = bing_conversions_1.BingConversions.TranslateViewOptions(options);
            m.setView(o);
        });
    };
    /**
     * Sets the zoom level of the map.
     *
     * @param {number} zoom - Zoom level to set.
     * @returns {Promise<void>} - A Promise that is fullfilled once the zoom operation is complete.
     *
     * @memberof BingMapService
     */
    BingMapService.prototype.SetZoom = function (zoom) {
        return this._map.then(function (map) { return map.setView({
            zoom: zoom
        }); });
    };
    /**
     * Creates an event subscription
     *
     * @template E - Generic type of the underlying event.
     * @param {string} eventName - The name of the event (e.g. 'click')
     * @returns {Observable<E>} - An observable of tpye E that fires when the event occurs.
     *
     * @memberof BingMapService
     */
    BingMapService.prototype.SubscribeToMapEvent = function (eventName) {
        var _this = this;
        var eventNameTranslated = bing_events_lookup_1.BingMapEventsLookup[eventName];
        return Observable_1.Observable.create(function (observer) {
            _this._map.then(function (m) {
                Microsoft.Maps.Events.addHandler(m, eventNameTranslated, function (e) {
                    _this._zone.run(function () { return observer.next(e); });
                });
            });
        });
    };
    /**
     * Triggers the given event name on the map instance.
     *
     * @param {string} eventName - Event to trigger.
     * @returns {Promise<void>} - A promise that is fullfilled once the event is triggered.
     *
     * @memberof BingMapService
     */
    BingMapService.prototype.TriggerMapEvent = function (eventName) {
        return this._map.then(function (m) { return Microsoft.Maps.Events.invoke(m, eventName, null); });
    };
    return BingMapService;
}());
BingMapService.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
BingMapService.ctorParameters = function () { return [
    { type: mapapiloader_1.MapAPILoader, },
    { type: core_1.NgZone, },
]; };
exports.BingMapService = BingMapService;
//# sourceMappingURL=bing-map.service.js.map