import { NgZone } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { ILatLong } from './../../interfaces/ilatlong';
import { IPolygonOptions } from '../../interfaces/ipolygon-options';
import { Polygon } from '../../models/polygon';
import { MapPolygonDirective } from '../../components/map-polygon';
import { PolygonService } from '../polygon.service';
import { MapService } from '../map.service';
import { LayerService } from '../layer.service';
/**
 * Concrete implementation of the Polygon Service abstract class for Bing Maps V8.
 *
 * @export
 * @class BingPolygonService
 * @implements {PolygonService}
 */
export declare class BingPolygonService implements PolygonService {
    private _mapService;
    private _layerService;
    private _zone;
    private _polygons;
    /**
     * Creates an instance of BingPolygonService.
     * @param {MapService} _mapService - {@link MapService} instance. The concrete {@link BingMapService} implementation is expected.
     * @param {LayerService} _layerService - {@link BingLayerService} instance.
     * The concrete {@link BingLayerService} implementation is expected.
     * @param {NgZone} _zone - NgZone instance to support zone aware promises.
     *
     * @memberof BingPolygonService
     */
    constructor(_mapService: MapService, _layerService: LayerService, _zone: NgZone);
    /**
     * Adds a polygon to a map. Depending on the polygon context, the polygon will either by added to the map or a
     * correcsponding layer.
     *
     * @param {MapPolygonDirective} polygon - The {@link MapPolygonDirective} to be added.
     *
     * @memberof BingPolygonService
     */
    AddPolygon(polygon: MapPolygonDirective): void;
    /**
      * Registers an event delegate for a polygon.
      *
      * @template T - Type of the event to emit.
      * @param {string} eventName - The name of the event to register (e.g. 'click')
      * @param {MapPolygonDirective} polygon - The {@link MapPolygonDirective} for which to register the event.
      * @returns {Observable<T>} - Observable emiting an instance of T each time the event occurs.
      *
      * @memberof BingPolygonService
      */
    CreateEventObservable<T>(eventName: string, polygon: MapPolygonDirective): Observable<T>;
    /**
      * Deletes a polygon.
      *
      * @param {MapPolygonDirective} polygon - {@link MapPolygonDirective} to be deleted.
      * @returns {Promise<void>} - A promise fullfilled once the polygon has been deleted.
      *
      * @memberof BingPolygonService
      */
    DeletePolygon(polygon: MapPolygonDirective): Promise<void>;
    /**
     * Obtains geo coordinates for the polygon on the click location
     *
     * @abstract
     * @param {(MouseEvent| any)} e - The mouse event. Expected to implement {@link Microsoft.Maps.IMouseEventArgs}.
     * @returns {ILatLong} - {@link ILatLong} containing the geo coordinates of the clicked marker.
     *
     * @memberof BingPolygonService
     */
    GetCoordinatesFromClick(e: MouseEvent | any): ILatLong;
    /**
     * Obtains the polygon model for the polygon allowing access to native implementation functionatiliy.
     *
     * @param {MapPolygonDirective} polygon - The {@link MapPolygonDirective} for which to obtain the polygon model.
     * @returns {Promise<Polygon>} - A promise that when fullfilled contains the {@link Polygon} implementation of the underlying platform.
     *
     * @memberof BingPolygonService
     */
    GetNativePolygon(polygon: MapPolygonDirective): Promise<Polygon>;
    /**
     * Set the polygon options.
     *
     * @param {MapPolygonDirective} polygon - {@link MapPolygonDirective} to be updated.
     * @param {IPolygonOptions} options - {@link IPolygonOptions} object containing the options. Options will be merged with the
     * options already on the underlying object.
     * @returns {Promise<void>} - A promise fullfilled once the polygon options have been set.
     *
     * @memberof BingPolygonService
     */
    SetOptions(polygon: MapPolygonDirective, options: IPolygonOptions): Promise<void>;
    /**
     * Updates the Polygon path
     *
     * @param {MapPolygonDirective} polygon - {@link MapPolygonDirective} to be updated.
     * @returns {Promise<void>} - A promise fullfilled once the polygon has been updated.
     *
     * @memberof BingPolygonService
     */
    UpdatePolygon(polygon: MapPolygonDirective): Promise<void>;
}
