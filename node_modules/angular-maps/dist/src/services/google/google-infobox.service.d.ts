import { NgZone } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { InfoBoxComponent } from './../../components/infobox';
import { IInfoWindowOptions } from './../../interfaces/iinfo-window-options';
import { ILatLong } from './../../interfaces/ilatlong';
import { InfoBoxService } from './../infobox.service';
import { MarkerService } from './../marker.service';
import { MapService } from './../map.service';
export declare class GoogleInfoBoxService extends InfoBoxService {
    private _mapService;
    private _markerService;
    private _zone;
    private _boxes;
    /**
     * Creates an instance of GoogleInfoBoxService.
     * @param {MapService} _mapService
     * @param {MarkerService} _markerService
     * @param {NgZone} _zone
     *
     * @memberof GoogleInfoBoxService
     */
    constructor(_mapService: MapService, _markerService: MarkerService, _zone: NgZone);
    /**
     * Creates a new instance of an info window
     *
     * @param {InfoBoxComponent} info
     *
     * @memberof GoogleInfoBoxService
     */
    AddInfoWindow(info: InfoBoxComponent): void;
    /**
     * Closes the info window
     *
     * @param {InfoBoxComponent} info
     * @returns {Promise<void>} -  A promise that is resolved when the info box is closed.
     *
     * @memberof GoogleInfoBoxService
     */
    Close(info: InfoBoxComponent): Promise<void>;
    /**
     * Registers an event delegate for an info window.
     *
     * @template T - Type of the event to emit.
     * @param {string} eventName - The name of the event to register (e.g. 'click')
     * @param {InfoBoxComponent} infoComponent - The {@link InfoBoxComponent} for which to register the event.
     * @returns {Observable<T>} - Observable emiting an instance of T each time the event occurs.
     *
     * @memberof GoogleInfoBoxService
     */
    CreateEventObservable<T>(eventName: string, infoComponent: InfoBoxComponent): Observable<T>;
    /**
     * Deletes the info window
     *
     * @param {InfoBoxComponent} info
     * @returns {Promise<void>}
     *
     * @memberof GoogleInfoBoxService
     */
    DeleteInfoWindow(info: InfoBoxComponent): Promise<void>;
    /**
     * Opens the info window. Window opens on a marker, if supplied, or a specific location if given
     *
     * @param {InfoBoxComponent} info
     * @param {ILatLong} [loc]
     * @returns {Promise<void>}
     *
     * @memberof GoogleInfoBoxService
     */
    Open(info: InfoBoxComponent, loc?: ILatLong): Promise<void>;
    /**
     * Sets the info window options
     *
     * @param {InfoBoxComponent} info
     * @param {IInfoWindowOptions} options
     * @returns {Promise<void>}
     *
     * @memberof GoogleInfoBoxService
     */
    SetOptions(info: InfoBoxComponent, options: IInfoWindowOptions): Promise<void>;
    /**
     * Sets the info window position
     *
     * @param {InfoBoxComponent} info
     * @param {ILatLong} latlng
     * @returns {Promise<void>}
     *
     * @memberof GoogleInfoBoxService
     */
    SetPosition(info: InfoBoxComponent, latlng: ILatLong): Promise<void>;
}
