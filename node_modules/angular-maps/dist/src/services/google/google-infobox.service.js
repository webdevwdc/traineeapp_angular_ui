"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Observable_1 = require("rxjs/Observable");
var infobox_service_1 = require("./../infobox.service");
var marker_service_1 = require("./../marker.service");
var map_service_1 = require("./../map.service");
var google_events_lookup_1 = require("./../../models/google/google-events-lookup");
var GoogleInfoBoxService = (function (_super) {
    __extends(GoogleInfoBoxService, _super);
    ///
    /// Constructors
    ///
    /**
     * Creates an instance of GoogleInfoBoxService.
     * @param {MapService} _mapService
     * @param {MarkerService} _markerService
     * @param {NgZone} _zone
     *
     * @memberof GoogleInfoBoxService
     */
    function GoogleInfoBoxService(_mapService, _markerService, _zone) {
        var _this = _super.call(this) || this;
        _this._mapService = _mapService;
        _this._markerService = _markerService;
        _this._zone = _zone;
        ///
        /// Field declarations
        ///
        _this._boxes = new Map();
        return _this;
    }
    /**
     * Creates a new instance of an info window
     *
     * @param {InfoBoxComponent} info
     *
     * @memberof GoogleInfoBoxService
     */
    GoogleInfoBoxService.prototype.AddInfoWindow = function (info) {
        var options = {};
        if (info.HtmlContent !== '') {
            options.htmlContent = info.HtmlContent;
        }
        else {
            options.title = info.Title;
            options.description = info.Description;
        }
        if (info.xOffset || info.yOffset) {
            if (options.pixelOffset == null) {
                options.pixelOffset = { x: 0, y: 0 };
            }
            if (info.xOffset) {
                options.pixelOffset.x = info.xOffset;
            }
            if (info.yOffset) {
                options.pixelOffset.y = info.yOffset;
            }
        }
        options.disableAutoPan = info.DisableAutoPan;
        options.visible = info.Visible;
        if (typeof info.Latitude === 'number' && typeof info.Longitude === 'number') {
            options.position = { latitude: info.Latitude, longitude: info.Longitude };
        }
        var infoWindowPromise = this._mapService.CreateInfoWindow(options);
        this._boxes.set(info, infoWindowPromise);
    };
    ;
    /**
     * Closes the info window
     *
     * @param {InfoBoxComponent} info
     * @returns {Promise<void>} -  A promise that is resolved when the info box is closed.
     *
     * @memberof GoogleInfoBoxService
     */
    GoogleInfoBoxService.prototype.Close = function (info) {
        return this._boxes.get(info).then(function (w) {
            w.Close();
        });
    };
    ;
    /**
     * Registers an event delegate for an info window.
     *
     * @template T - Type of the event to emit.
     * @param {string} eventName - The name of the event to register (e.g. 'click')
     * @param {InfoBoxComponent} infoComponent - The {@link InfoBoxComponent} for which to register the event.
     * @returns {Observable<T>} - Observable emiting an instance of T each time the event occurs.
     *
     * @memberof GoogleInfoBoxService
     */
    GoogleInfoBoxService.prototype.CreateEventObservable = function (eventName, infoComponent) {
        var _this = this;
        var googleEventName = google_events_lookup_1.GoogleMapEventsLookup[eventName];
        return Observable_1.Observable.create(function (observer) {
            _this._boxes.get(infoComponent).then(function (b) {
                b.AddListener(googleEventName, function (e) { return _this._zone.run(function () { return observer.next(e); }); });
            });
        });
    };
    /**
     * Deletes the info window
     *
     * @param {InfoBoxComponent} info
     * @returns {Promise<void>}
     *
     * @memberof GoogleInfoBoxService
     */
    GoogleInfoBoxService.prototype.DeleteInfoWindow = function (info) {
        return Promise.resolve();
    };
    ;
    /**
     * Opens the info window. Window opens on a marker, if supplied, or a specific location if given
     *
     * @param {InfoBoxComponent} info
     * @param {ILatLong} [loc]
     * @returns {Promise<void>}
     *
     * @memberof GoogleInfoBoxService
     */
    GoogleInfoBoxService.prototype.Open = function (info, loc) {
        var _this = this;
        if (info.CloseInfoBoxesOnOpen || info.Modal) {
            // close all open info boxes
            this._boxes.forEach(function (box, i) {
                if (info.Id !== i.Id) {
                    box.then(function (w) {
                        if (w.IsOpen) {
                            w.Close();
                            i.Close();
                        }
                    });
                }
            });
        }
        return this._boxes.get(info).then(function (w) {
            if (info.HostMarker != null) {
                return _this._markerService.GetNativeMarker(info.HostMarker).then(function (marker) {
                    return _this._mapService.MapPromise.then(function (map) { return w.Open(marker.NativePrimitve); });
                });
            }
            return _this._mapService.MapPromise.then(function (map) {
                if (loc) {
                    w.SetPosition(loc);
                }
                w.Open();
            });
        });
    };
    ;
    /**
     * Sets the info window options
     *
     * @param {InfoBoxComponent} info
     * @param {IInfoWindowOptions} options
     * @returns {Promise<void>}
     *
     * @memberof GoogleInfoBoxService
     */
    GoogleInfoBoxService.prototype.SetOptions = function (info, options) {
        return Promise.resolve();
    };
    ;
    /**
     * Sets the info window position
     *
     * @param {InfoBoxComponent} info
     * @param {ILatLong} latlng
     * @returns {Promise<void>}
     *
     * @memberof GoogleInfoBoxService
     */
    GoogleInfoBoxService.prototype.SetPosition = function (info, latlng) {
        this._boxes.get(info).then(function (w) {
            w.SetPosition(latlng);
        });
        return Promise.resolve();
    };
    ;
    return GoogleInfoBoxService;
}(infobox_service_1.InfoBoxService));
GoogleInfoBoxService.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
GoogleInfoBoxService.ctorParameters = function () { return [
    { type: map_service_1.MapService, },
    { type: marker_service_1.MarkerService, },
    { type: core_1.NgZone, },
]; };
exports.GoogleInfoBoxService = GoogleInfoBoxService;
//# sourceMappingURL=google-infobox.service.js.map