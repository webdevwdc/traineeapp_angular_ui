"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This abstract partially implements the contract for the {@link LayerService}
 * and {@link ClusterService} for the Google Maps archtiecture. It serves
 * as the base class for basic layer ({@link GoogleLayerService}) and cluster layer ({@link GoogleClusterLayer}).
 *
 * @export
 * @abstract
 * @class GoogleLayerBase
 */
var GoogleLayerBase = (function () {
    ///
    /// Constructor
    ///
    /**
     * Creates an instance of GoogleLayerBase.
     * @param {MapService} _mapService - Concrete {@link MapService} implementation for Google Maps.
     * An instance of {@link GoogleMapService}.
     *
     * @memberof GoogleLayerBase
     */
    function GoogleLayerBase(_mapService) {
        this._mapService = _mapService;
    }
    /**
     * Creates a marker in the layer.
     *
     * @param {number} layer - The Id of the layer in which to create the marker.
     * @param {IMarkerOptions} options - {@link IMarkerOptions} object containing the marker properties.
     * @returns {Promise<Marker>} - A promise that when fullfilled contains the {@link Marker} model for the created marker.
     *
     * @memberof GoogleLayerBase
     */
    GoogleLayerBase.prototype.CreateMarker = function (layer, options) {
        return new Promise(function (r, x) {
            // TODO: needs implementation.
        });
    };
    ;
    ///
    /// Protected methods
    ///
    /**
     * Gets the layer based on its id.
     *
     * @protected
     * @param {number} id - Layer Id.
     * @returns {Promise<Layer>}  - A promise that when fullfilled contains the {@link Layer} model for the layer.
     *
     * @memberof GoogleLayerBase
     */
    GoogleLayerBase.prototype.GetLayerById = function (id) {
        var p;
        this._layers.forEach(function (l, k) { if (k.Id === id) {
            p = l;
        } });
        return p;
    };
    return GoogleLayerBase;
}());
exports.GoogleLayerBase = GoogleLayerBase;
//# sourceMappingURL=google-layer-base.js.map