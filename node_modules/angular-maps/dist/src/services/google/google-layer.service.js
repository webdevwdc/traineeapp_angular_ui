"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var google_layer_base_1 = require("./google-layer-base");
var map_service_1 = require("../map.service");
/**
 * Implements the {@link LayerService} contract for a Google Maps specific implementation.
 *
 * @export
 * @class GoogleLayerService
 * @extends {GoogleLayerBase}
 * @implements {LayerService}
 */
var GoogleLayerService = (function (_super) {
    __extends(GoogleLayerService, _super);
    ///
    /// Constructor
    ///
    /**
     * Creates an instance of GoogleLayerService.
     * @param {MapService} _mapService - Instance of the Google Maps Service. Will generally be injected.
     * @param {NgZone} _zone - NgZone instance to provide zone aware promises.
     *
     * @memberof GoogleLayerService
     */
    function GoogleLayerService(_mapService, _zone) {
        var _this = _super.call(this, _mapService) || this;
        _this._zone = _zone;
        ///
        /// Field Declarations.
        ///
        _this._layers = new Map();
        return _this;
    }
    /**
     * Adds a layer to the map.
     *
     * @abstract
     * @param {MapLayerDirective} layer - MapLayerDirective component object.
     * Generally, MapLayerDirective will be injected with an instance of the
     * LayerService and then self register on initialization.
     *
     * @memberof GoogleLayerService
     */
    GoogleLayerService.prototype.AddLayer = function (layer) {
    };
    ;
    /**
     * Returns the Layer model represented by this layer.
     *
     * @abstract
     * @param {MapLayerDirective} layer - MapLayerDirective component object for which to retrieve the layer model.
     * @returns {Promise<Layer>} - A promise that when resolved contains the Layer model.
     *
     * @memberof GoogleLayerService
     */
    GoogleLayerService.prototype.GetNativeLayer = function (layer) {
        return new Promise(function (r, x) {
            // TODO: needs implementation.
        });
    };
    ;
    /**
     * Deletes the layer
     *
     * @abstract
     * @param {MapLayerDirective} layer - MapLayerDirective component object for which to retrieve the layer.
     * @returns {Promise<void>} - A promise that is fullfilled when the layer has been removed.
     *
     * @memberof GoogleLayerService
     */
    GoogleLayerService.prototype.DeleteLayer = function (layer) {
        return new Promise(function (r, x) {
            // TODO: needs implementation.
        });
    };
    ;
    /**
     * Adds a polygon to the layer.
     *
     * @abstract
     * @param {number} layer - The id of the layer to which to add the polygon.
     * @param {IPolygonOptions} options - Polygon options defining the polygon.
     * @returns {Promise<Polygon>} - A promise that when fullfilled contains the an instance of the Polygon model.
     *
     * @memberof GoogleLayerService
     */
    GoogleLayerService.prototype.CreatePolygon = function (layer, options) {
        return new Promise(function (r, x) {
            // TODO: needs implementation.
        });
    };
    ;
    /**
     * Adds a polyline to the layer.
     *
     * @abstract
     * @param {number} layer - The id of the layer to which to add the polyline.
     * @param {IPolylineOptions} options - Polyline options defining the polyline.
     * @returns {Promise<Polyline|Array<Polyline>>} - A promise that when fullfilled contains the an instance of the Polyline (or an array
     * of polygons for complex paths) model.
     *
     * @memberof GoogleLayerService
     */
    GoogleLayerService.prototype.CreatePolyline = function (layer, options) {
        return new Promise(function (r, x) {
            // TODO: needs implementation.
        });
    };
    ;
    return GoogleLayerService;
}(google_layer_base_1.GoogleLayerBase));
GoogleLayerService.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
GoogleLayerService.ctorParameters = function () { return [
    { type: map_service_1.MapService, },
    { type: core_1.NgZone, },
]; };
exports.GoogleLayerService = GoogleLayerService;
//# sourceMappingURL=google-layer.service.js.map