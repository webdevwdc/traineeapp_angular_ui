"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var mapapiloader_1 = require("../mapapiloader");
var google_map_api_loader_service_1 = require("./google-map-api-loader.service");
var google_infobox_service_1 = require("./google-infobox.service");
var google_marker_service_1 = require("./google-marker.service");
var google_map_service_1 = require("./google-map.service");
var google_layer_service_1 = require("./google-layer.service");
var google_cluster_service_1 = require("./google-cluster.service");
var google_polygon_service_1 = require("./google-polygon.service");
var google_polyline_service_1 = require("./google-polyline.service");
/**
 * Implements a factory to create three necessary Google Maps specific service instances.
 *
 * @export
 * @class GoogleMapServiceFactory
 * @implements {MapServiceFactory}
 */
var GoogleMapServiceFactory = (function () {
    ///
    /// Constructor
    ///
    /**
     * Creates an instance of GoogleMapServiceFactory.
     * @param {MapAPILoader} _loader - {@link MapAPILoader} implementation for the Google Map provider.
     * @param {NgZone} _zone - NgZone object to implement zone aware promises.
     *
     * @memberof GoogleMapServiceFactory
     */
    function GoogleMapServiceFactory(_loader, _zone) {
        var _this = this;
        this._loader = _loader;
        this._zone = _zone;
        this._map =
            new Promise(function (resolve) { _this._mapResolver = resolve; });
    }
    ///
    /// Public methods and MapServiceFactory implementation.
    ///
    /**
     * Creates the map service for the Google Maps implementation.
     *
     * @returns {MapService} - {@link MapService}. A concreted instance of the {@link GoogleMapService}.
     *
     * @memberof GoogleMapServiceFactory
     */
    GoogleMapServiceFactory.prototype.Create = function () {
        return new google_map_service_1.GoogleMapService(this._loader, this._zone);
    };
    /**
     * Creates the cluster service for the Google Maps implementation.
     *
     * @param {MapService} map - {@link MapService}. A concreted instance of the {@link GoogleMapService}.
     * @returns {ClusterService} - {@link ClusterService}. A concreted instance of the {@link GoogleClusterService}.
     *
     * @memberof GoogleMapServiceFactory
     */
    GoogleMapServiceFactory.prototype.CreateClusterService = function (_mapService) {
        return new google_cluster_service_1.GoogleClusterService(_mapService, this._zone);
    };
    /**
     * Creates thh info box service for the Google Maps implementation.
     *
     * @param {MapService} map - {@link MapService}. A concreted instance of the {@link GoogleMapService}.
     * @param {MarkerService} map - {@link MarkerService}. A concreted instance of the {@link GoogleMarkerService}.
     * @returns {InfoBoxService} - {@link InfoBoxService}. A concreted instance of the {@link GoogleInfoBoxService}.
     *
     * @memberof GoogleMapServiceFactory
     */
    GoogleMapServiceFactory.prototype.CreateInfoBoxService = function (_mapService, _markerService) {
        return new google_infobox_service_1.GoogleInfoBoxService(_mapService, _markerService, this._zone);
    };
    /**
     * Creates the layer service for the Google Maps implementation.
     *
     * @param {MapService} map - {@link MapService}. A concreted instance of the {@link GoogleMapService}.
     * @returns {LayerService} - {@link LayerService}. A concreted instance of the {@link GoogleLayerService}.
     *
     * @memberof GoogleMapServiceFactory
     */
    GoogleMapServiceFactory.prototype.CreateLayerService = function (_mapService) {
        return new google_layer_service_1.GoogleLayerService(_mapService, this._zone);
    };
    /**
     * Creates the marker service for the Google Maps implementation.
     *
     * @param {MapService} map - {@link MapService}. A concreted instance of the {@link GoogleMapService}.
     * @param {LayerService} layers - {@link LayerService}. A concreted instance of the {@link GoogleLayerService}.
     * @param {ClusterService} clusters  - {@link ClusterService}. A concreted instance of the {@link GoogleClusterService}.
     * @returns {MarkerService} - {@link MarkerService}. A concreted instance of the {@link GoogleMarkerService}.
     *
     * @memberof GoogleMapServiceFactory
     */
    GoogleMapServiceFactory.prototype.CreateMarkerService = function (_mapService, _layerService, _clusterService) {
        return new google_marker_service_1.GoogleMarkerService(_mapService, _layerService, _clusterService, this._zone);
    };
    /**
     * Creates the polygon service for the Google Maps implementation.
     *
     * @param {MapService} map - {@link MapService} implementation for thh underlying map archticture.
     * @param {LayerService} layers - {@link LayerService} implementation for the underlying map architecture.
     * @returns {PolygonService} - {@link PolygonService} implementation for the underlying map architecture.
     *
     * @memberof MapServiceFactory
     */
    GoogleMapServiceFactory.prototype.CreatePolygonService = function (map, layers) {
        return new google_polygon_service_1.GooglePolygonService(map, layers, this._zone);
    };
    /**
     * Creates the polyline service for the Google Maps implementation.
     *
     * @param {MapService} map - {@link MapService} implementation for thh underlying map archticture.
     * @param {LayerService} layers - {@link LayerService} implementation for the underlying map architecture.
     * @returns {PolylineService} - {@link PolylineService} implementation for the underlying map architecture.
     *
     * @memberof MapServiceFactory
     */
    GoogleMapServiceFactory.prototype.CreatePolylineService = function (map, layers) {
        return new google_polyline_service_1.GooglePolylineService(map, layers, this._zone);
    };
    return GoogleMapServiceFactory;
}());
GoogleMapServiceFactory.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
GoogleMapServiceFactory.ctorParameters = function () { return [
    { type: mapapiloader_1.MapAPILoader, },
    { type: core_1.NgZone, },
]; };
exports.GoogleMapServiceFactory = GoogleMapServiceFactory;
/**
 *  Creates a new instance of a plaform specific MapServiceFactory.
 *
 * @param apiLoader - An {@link MapAPILoader} instance. This is expected to the a {@link GoogleMapAPILoader}.
 * @param zone - An NgZone instance to provide zone aware promises.
 *
 * @return {MapServiceFactory} -  A {@link MapServiceFactory} instance.
 */
function GoogleMapServiceFactoryFactory(apiLoader, zone) {
    return new GoogleMapServiceFactory(apiLoader, zone);
}
exports.GoogleMapServiceFactoryFactory = GoogleMapServiceFactoryFactory;
/**
 * Creates a new instance of a plaform specific MapLoaderFactory.
 *
 * @export
 * @returns {MapAPILoader} - A {@link MapAPILoader} instance.
 */
function GoogleMapLoaderFactory() {
    return new google_map_api_loader_service_1.GoogleMapAPILoader(new google_map_api_loader_service_1.GoogleMapAPILoaderConfig(), new mapapiloader_1.WindowRef(), new mapapiloader_1.DocumentRef());
}
exports.GoogleMapLoaderFactory = GoogleMapLoaderFactory;
//# sourceMappingURL=google-map.service.factory.js.map