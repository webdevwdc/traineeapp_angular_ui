"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
/**
 * Abstract implementation. USed for defintion only and as a base to implement your
 * own provider.
 *
 * @export
 * @abstract
 * @class MapAPILoader
 */
var MapAPILoader = (function () {
    function MapAPILoader() {
    }
    return MapAPILoader;
}());
MapAPILoader.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
MapAPILoader.ctorParameters = function () { return []; };
exports.MapAPILoader = MapAPILoader;
/**
 * Document Reference service to assist with abstracting the availability of document. Needed for AOT and
 * Server Side rendering
 *
 * @export
 * @class DocumentRef
 */
var DocumentRef = (function () {
    function DocumentRef() {
    }
    Object.defineProperty(DocumentRef.prototype, "IsAvailable", {
        /**
         * Gets whether a document implementation is available. Generally will be true in the browser and false otherwise, unless there
         * there is a browser-less implementation in the current non-browser environment.
         *
         * @readonly
         * @type {boolean}
         * @memberof DocumentRef
         */
        get: function () {
            return !(typeof (document) === 'undefined');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the document object of the current environment.
     *
     * @returns {*} - The document object.
     *
     * @memberof DocumentRef
     */
    DocumentRef.prototype.GetNativeDocument = function () {
        if (typeof (document) === 'undefined') {
            return null;
        }
        return document;
    };
    return DocumentRef;
}());
DocumentRef.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
DocumentRef.ctorParameters = function () { return []; };
exports.DocumentRef = DocumentRef;
/**
 * Window Reference service to assist with abstracting the availability of window. Needed for AOT and
 * Server Side rendering
 *
 * @export
 * @class WindowRef
 */
var WindowRef = (function () {
    function WindowRef() {
    }
    Object.defineProperty(WindowRef.prototype, "IsAvailable", {
        /**
         * Gets whether a window implementation is available. Generally will be true in the browser and false otherwise, unless there
         * there is a browser-less implementation in the current non-browser environment.
         *
         * @readonly
         * @type {boolean}
         * @memberof WindowRef
         */
        get: function () {
            return !(typeof (window) === 'undefined');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Returns the window object of the current environment.
     *
     * @returns {*} - The window object.
     *
     * @memberof WindowRef
     */
    WindowRef.prototype.GetNativeWindow = function () {
        if (typeof (window) === 'undefined') {
            return null;
        }
        return window;
    };
    return WindowRef;
}());
WindowRef.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
WindowRef.ctorParameters = function () { return []; };
exports.WindowRef = WindowRef;
//# sourceMappingURL=mapapiloader.js.map